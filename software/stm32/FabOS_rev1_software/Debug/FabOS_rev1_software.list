
FabOS_rev1_software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cac  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002e34  08002e34  00003e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e4c  08002e4c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e4c  08002e4c  00003e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e54  08002e54  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e54  08002e54  00003e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e58  08002e58  00003e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002e5c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000328  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000334  20000334  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f747  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000220e  00000000  00000000  00013783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  00015998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad0  00000000  00000000  00016770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000221a7  00000000  00000000  00017240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fc45  00000000  00000000  000393e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0f82  00000000  00000000  0004902c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00119fae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039e8  00000000  00000000  00119ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0011d9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002e1c 	.word	0x08002e1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002e1c 	.word	0x08002e1c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80004bc:	4b1f      	ldr	r3, [pc, #124]	@ (800053c <MX_ETH_Init+0x84>)
 80004be:	4a20      	ldr	r2, [pc, #128]	@ (8000540 <MX_ETH_Init+0x88>)
 80004c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80004c2:	4b20      	ldr	r3, [pc, #128]	@ (8000544 <MX_ETH_Init+0x8c>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80004c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000544 <MX_ETH_Init+0x8c>)
 80004ca:	2280      	movs	r2, #128	@ 0x80
 80004cc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80004ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000544 <MX_ETH_Init+0x8c>)
 80004d0:	22e1      	movs	r2, #225	@ 0xe1
 80004d2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80004d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000544 <MX_ETH_Init+0x8c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80004da:	4b1a      	ldr	r3, [pc, #104]	@ (8000544 <MX_ETH_Init+0x8c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80004e0:	4b18      	ldr	r3, [pc, #96]	@ (8000544 <MX_ETH_Init+0x8c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80004e6:	4b15      	ldr	r3, [pc, #84]	@ (800053c <MX_ETH_Init+0x84>)
 80004e8:	4a16      	ldr	r2, [pc, #88]	@ (8000544 <MX_ETH_Init+0x8c>)
 80004ea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80004ec:	4b13      	ldr	r3, [pc, #76]	@ (800053c <MX_ETH_Init+0x84>)
 80004ee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80004f2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80004f4:	4b11      	ldr	r3, [pc, #68]	@ (800053c <MX_ETH_Init+0x84>)
 80004f6:	4a14      	ldr	r2, [pc, #80]	@ (8000548 <MX_ETH_Init+0x90>)
 80004f8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80004fa:	4b10      	ldr	r3, [pc, #64]	@ (800053c <MX_ETH_Init+0x84>)
 80004fc:	4a13      	ldr	r2, [pc, #76]	@ (800054c <MX_ETH_Init+0x94>)
 80004fe:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000500:	4b0e      	ldr	r3, [pc, #56]	@ (800053c <MX_ETH_Init+0x84>)
 8000502:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000506:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000508:	480c      	ldr	r0, [pc, #48]	@ (800053c <MX_ETH_Init+0x84>)
 800050a:	f000 fd8d 	bl	8001028 <HAL_ETH_Init>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000514:	f000 fa4e 	bl	80009b4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000518:	2238      	movs	r2, #56	@ 0x38
 800051a:	2100      	movs	r1, #0
 800051c:	480c      	ldr	r0, [pc, #48]	@ (8000550 <MX_ETH_Init+0x98>)
 800051e:	f002 fc51 	bl	8002dc4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000522:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <MX_ETH_Init+0x98>)
 8000524:	2221      	movs	r2, #33	@ 0x21
 8000526:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000528:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <MX_ETH_Init+0x98>)
 800052a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800052e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000530:	4b07      	ldr	r3, [pc, #28]	@ (8000550 <MX_ETH_Init+0x98>)
 8000532:	2200      	movs	r2, #0
 8000534:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	200001a0 	.word	0x200001a0
 8000540:	40028000 	.word	0x40028000
 8000544:	20000250 	.word	0x20000250
 8000548:	200000c8 	.word	0x200000c8
 800054c:	20000028 	.word	0x20000028
 8000550:	20000168 	.word	0x20000168

08000554 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08e      	sub	sp, #56	@ 0x38
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a46      	ldr	r2, [pc, #280]	@ (800068c <HAL_ETH_MspInit+0x138>)
 8000572:	4293      	cmp	r3, r2
 8000574:	f040 8085 	bne.w	8000682 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	623b      	str	r3, [r7, #32]
 800057c:	4b44      	ldr	r3, [pc, #272]	@ (8000690 <HAL_ETH_MspInit+0x13c>)
 800057e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000580:	4a43      	ldr	r2, [pc, #268]	@ (8000690 <HAL_ETH_MspInit+0x13c>)
 8000582:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000586:	6313      	str	r3, [r2, #48]	@ 0x30
 8000588:	4b41      	ldr	r3, [pc, #260]	@ (8000690 <HAL_ETH_MspInit+0x13c>)
 800058a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000590:	623b      	str	r3, [r7, #32]
 8000592:	6a3b      	ldr	r3, [r7, #32]
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]
 8000598:	4b3d      	ldr	r3, [pc, #244]	@ (8000690 <HAL_ETH_MspInit+0x13c>)
 800059a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059c:	4a3c      	ldr	r2, [pc, #240]	@ (8000690 <HAL_ETH_MspInit+0x13c>)
 800059e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80005a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a4:	4b3a      	ldr	r3, [pc, #232]	@ (8000690 <HAL_ETH_MspInit+0x13c>)
 80005a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80005ac:	61fb      	str	r3, [r7, #28]
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
 80005b4:	4b36      	ldr	r3, [pc, #216]	@ (8000690 <HAL_ETH_MspInit+0x13c>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b8:	4a35      	ldr	r2, [pc, #212]	@ (8000690 <HAL_ETH_MspInit+0x13c>)
 80005ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80005be:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c0:	4b33      	ldr	r3, [pc, #204]	@ (8000690 <HAL_ETH_MspInit+0x13c>)
 80005c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80005c8:	61bb      	str	r3, [r7, #24]
 80005ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	4b2f      	ldr	r3, [pc, #188]	@ (8000690 <HAL_ETH_MspInit+0x13c>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d4:	4a2e      	ldr	r2, [pc, #184]	@ (8000690 <HAL_ETH_MspInit+0x13c>)
 80005d6:	f043 0304 	orr.w	r3, r3, #4
 80005da:	6313      	str	r3, [r2, #48]	@ 0x30
 80005dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000690 <HAL_ETH_MspInit+0x13c>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e0:	f003 0304 	and.w	r3, r3, #4
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <HAL_ETH_MspInit+0x13c>)
 80005ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f0:	4a27      	ldr	r2, [pc, #156]	@ (8000690 <HAL_ETH_MspInit+0x13c>)
 80005f2:	f043 0301 	orr.w	r3, r3, #1
 80005f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f8:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <HAL_ETH_MspInit+0x13c>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fc:	f003 0301 	and.w	r3, r3, #1
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	4b21      	ldr	r3, [pc, #132]	@ (8000690 <HAL_ETH_MspInit+0x13c>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060c:	4a20      	ldr	r2, [pc, #128]	@ (8000690 <HAL_ETH_MspInit+0x13c>)
 800060e:	f043 0302 	orr.w	r3, r3, #2
 8000612:	6313      	str	r3, [r2, #48]	@ 0x30
 8000614:	4b1e      	ldr	r3, [pc, #120]	@ (8000690 <HAL_ETH_MspInit+0x13c>)
 8000616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000618:	f003 0302 	and.w	r3, r3, #2
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000620:	2332      	movs	r3, #50	@ 0x32
 8000622:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000624:	2302      	movs	r3, #2
 8000626:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800062c:	2303      	movs	r3, #3
 800062e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000630:	230b      	movs	r3, #11
 8000632:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000638:	4619      	mov	r1, r3
 800063a:	4816      	ldr	r0, [pc, #88]	@ (8000694 <HAL_ETH_MspInit+0x140>)
 800063c:	f001 f81c 	bl	8001678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000640:	2386      	movs	r3, #134	@ 0x86
 8000642:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000644:	2302      	movs	r3, #2
 8000646:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800064c:	2303      	movs	r3, #3
 800064e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000650:	230b      	movs	r3, #11
 8000652:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000658:	4619      	mov	r1, r3
 800065a:	480f      	ldr	r0, [pc, #60]	@ (8000698 <HAL_ETH_MspInit+0x144>)
 800065c:	f001 f80c 	bl	8001678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000660:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000664:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000666:	2302      	movs	r3, #2
 8000668:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800066e:	2303      	movs	r3, #3
 8000670:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000672:	230b      	movs	r3, #11
 8000674:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800067a:	4619      	mov	r1, r3
 800067c:	4807      	ldr	r0, [pc, #28]	@ (800069c <HAL_ETH_MspInit+0x148>)
 800067e:	f000 fffb 	bl	8001678 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000682:	bf00      	nop
 8000684:	3738      	adds	r7, #56	@ 0x38
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40028000 	.word	0x40028000
 8000690:	40023800 	.word	0x40023800
 8000694:	40020800 	.word	0x40020800
 8000698:	40020000 	.word	0x40020000
 800069c:	40020400 	.word	0x40020400

080006a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	@ 0x28
 80006a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
 80006ba:	4b4f      	ldr	r3, [pc, #316]	@ (80007f8 <MX_GPIO_Init+0x158>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a4e      	ldr	r2, [pc, #312]	@ (80007f8 <MX_GPIO_Init+0x158>)
 80006c0:	f043 0310 	orr.w	r3, r3, #16
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b4c      	ldr	r3, [pc, #304]	@ (80007f8 <MX_GPIO_Init+0x158>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0310 	and.w	r3, r3, #16
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	4b48      	ldr	r3, [pc, #288]	@ (80007f8 <MX_GPIO_Init+0x158>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a47      	ldr	r2, [pc, #284]	@ (80007f8 <MX_GPIO_Init+0x158>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b45      	ldr	r3, [pc, #276]	@ (80007f8 <MX_GPIO_Init+0x158>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	4b41      	ldr	r3, [pc, #260]	@ (80007f8 <MX_GPIO_Init+0x158>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a40      	ldr	r2, [pc, #256]	@ (80007f8 <MX_GPIO_Init+0x158>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b3e      	ldr	r3, [pc, #248]	@ (80007f8 <MX_GPIO_Init+0x158>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b3a      	ldr	r3, [pc, #232]	@ (80007f8 <MX_GPIO_Init+0x158>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a39      	ldr	r2, [pc, #228]	@ (80007f8 <MX_GPIO_Init+0x158>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b37      	ldr	r3, [pc, #220]	@ (80007f8 <MX_GPIO_Init+0x158>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	4b33      	ldr	r3, [pc, #204]	@ (80007f8 <MX_GPIO_Init+0x158>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a32      	ldr	r2, [pc, #200]	@ (80007f8 <MX_GPIO_Init+0x158>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b30      	ldr	r3, [pc, #192]	@ (80007f8 <MX_GPIO_Init+0x158>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, USR_LED_1_Pin|USR_LED_2_Pin|USR_LED_3_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	211c      	movs	r1, #28
 8000746:	482d      	ldr	r0, [pc, #180]	@ (80007fc <MX_GPIO_Init+0x15c>)
 8000748:	f001 f932 	bl	80019b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRST_ETH_Pin|EMERGENCY_STOP_Pin, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f248 0140 	movw	r1, #32832	@ 0x8040
 8000752:	482b      	ldr	r0, [pc, #172]	@ (8000800 <MX_GPIO_Init+0x160>)
 8000754:	f001 f92c 	bl	80019b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIN_EN_GPIO_Port, LIN_EN_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2110      	movs	r1, #16
 800075c:	4829      	ldr	r0, [pc, #164]	@ (8000804 <MX_GPIO_Init+0x164>)
 800075e:	f001 f927 	bl	80019b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = USR_LED_1_Pin|USR_LED_2_Pin|USR_LED_3_Pin;
 8000762:	231c      	movs	r3, #28
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	4820      	ldr	r0, [pc, #128]	@ (80007fc <MX_GPIO_Init+0x15c>)
 800077a:	f000 ff7d 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = USR_BTN_3_Pin|USR_BTN_2_Pin;
 800077e:	2360      	movs	r3, #96	@ 0x60
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000782:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	481a      	ldr	r0, [pc, #104]	@ (80007fc <MX_GPIO_Init+0x15c>)
 8000794:	f000 ff70 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_1_Pin;
 8000798:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_1_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4619      	mov	r1, r3
 80007ae:	4816      	ldr	r0, [pc, #88]	@ (8000808 <MX_GPIO_Init+0x168>)
 80007b0:	f000 ff62 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NRST_ETH_Pin|EMERGENCY_STOP_Pin;
 80007b4:	f248 0340 	movw	r3, #32832	@ 0x8040
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	480c      	ldr	r0, [pc, #48]	@ (8000800 <MX_GPIO_Init+0x160>)
 80007ce:	f000 ff53 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIN_EN_Pin;
 80007d2:	2310      	movs	r3, #16
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LIN_EN_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	4806      	ldr	r0, [pc, #24]	@ (8000804 <MX_GPIO_Init+0x164>)
 80007ea:	f000 ff45 	bl	8001678 <HAL_GPIO_Init>

}
 80007ee:	bf00      	nop
 80007f0:	3728      	adds	r7, #40	@ 0x28
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40021000 	.word	0x40021000
 8000800:	40020000 	.word	0x40020000
 8000804:	40020400 	.word	0x40020400
 8000808:	40020800 	.word	0x40020800

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000810:	f000 fac2 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000814:	f000 f854 	bl	80008c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000818:	f7ff ff42 	bl	80006a0 <MX_GPIO_Init>
  MX_ETH_Init();
 800081c:	f7ff fe4c 	bl	80004b8 <MX_ETH_Init>
  MX_UART4_Init();
 8000820:	f000 f9be 	bl	8000ba0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000824:	f000 f9e6 	bl	8000bf4 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin, SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2104      	movs	r1, #4
 800082c:	4823      	ldr	r0, [pc, #140]	@ (80008bc <main+0xb0>)
 800082e:	f001 f8bf 	bl	80019b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(USR_LED_2_GPIO_Port, USR_LED_2_Pin, RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2108      	movs	r1, #8
 8000836:	4821      	ldr	r0, [pc, #132]	@ (80008bc <main+0xb0>)
 8000838:	f001 f8ba 	bl	80019b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(USR_LED_3_GPIO_Port, USR_LED_3_Pin, RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	2110      	movs	r1, #16
 8000840:	481e      	ldr	r0, [pc, #120]	@ (80008bc <main+0xb0>)
 8000842:	f001 f8b5 	bl	80019b0 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8000846:	20c8      	movs	r0, #200	@ 0xc8
 8000848:	f000 fae8 	bl	8000e1c <HAL_Delay>
	  HAL_GPIO_WritePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin, RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2104      	movs	r1, #4
 8000850:	481a      	ldr	r0, [pc, #104]	@ (80008bc <main+0xb0>)
 8000852:	f001 f8ad 	bl	80019b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(USR_LED_2_GPIO_Port, USR_LED_2_Pin, SET);
 8000856:	2201      	movs	r2, #1
 8000858:	2108      	movs	r1, #8
 800085a:	4818      	ldr	r0, [pc, #96]	@ (80008bc <main+0xb0>)
 800085c:	f001 f8a8 	bl	80019b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(USR_LED_3_GPIO_Port, USR_LED_3_Pin, RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	2110      	movs	r1, #16
 8000864:	4815      	ldr	r0, [pc, #84]	@ (80008bc <main+0xb0>)
 8000866:	f001 f8a3 	bl	80019b0 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 800086a:	20c8      	movs	r0, #200	@ 0xc8
 800086c:	f000 fad6 	bl	8000e1c <HAL_Delay>
	  HAL_GPIO_WritePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin, RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	2104      	movs	r1, #4
 8000874:	4811      	ldr	r0, [pc, #68]	@ (80008bc <main+0xb0>)
 8000876:	f001 f89b 	bl	80019b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(USR_LED_2_GPIO_Port, USR_LED_2_Pin, RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2108      	movs	r1, #8
 800087e:	480f      	ldr	r0, [pc, #60]	@ (80008bc <main+0xb0>)
 8000880:	f001 f896 	bl	80019b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(USR_LED_3_GPIO_Port, USR_LED_3_Pin, SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2110      	movs	r1, #16
 8000888:	480c      	ldr	r0, [pc, #48]	@ (80008bc <main+0xb0>)
 800088a:	f001 f891 	bl	80019b0 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 800088e:	20c8      	movs	r0, #200	@ 0xc8
 8000890:	f000 fac4 	bl	8000e1c <HAL_Delay>
	  HAL_GPIO_WritePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin, RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	2104      	movs	r1, #4
 8000898:	4808      	ldr	r0, [pc, #32]	@ (80008bc <main+0xb0>)
 800089a:	f001 f889 	bl	80019b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(USR_LED_2_GPIO_Port, USR_LED_2_Pin, SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	2108      	movs	r1, #8
 80008a2:	4806      	ldr	r0, [pc, #24]	@ (80008bc <main+0xb0>)
 80008a4:	f001 f884 	bl	80019b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(USR_LED_3_GPIO_Port, USR_LED_3_Pin, SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2110      	movs	r1, #16
 80008ac:	4803      	ldr	r0, [pc, #12]	@ (80008bc <main+0xb0>)
 80008ae:	f001 f87f 	bl	80019b0 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80008b2:	20c8      	movs	r0, #200	@ 0xc8
 80008b4:	f000 fab2 	bl	8000e1c <HAL_Delay>
	  HAL_GPIO_WritePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin, SET);
 80008b8:	bf00      	nop
 80008ba:	e7b5      	b.n	8000828 <main+0x1c>
 80008bc:	40021000 	.word	0x40021000

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b094      	sub	sp, #80	@ 0x50
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0320 	add.w	r3, r7, #32
 80008ca:	2230      	movs	r2, #48	@ 0x30
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 fa78 	bl	8002dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	4b27      	ldr	r3, [pc, #156]	@ (8000988 <SystemClock_Config+0xc8>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ec:	4a26      	ldr	r2, [pc, #152]	@ (8000988 <SystemClock_Config+0xc8>)
 80008ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f4:	4b24      	ldr	r3, [pc, #144]	@ (8000988 <SystemClock_Config+0xc8>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000900:	2300      	movs	r3, #0
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	4b21      	ldr	r3, [pc, #132]	@ (800098c <SystemClock_Config+0xcc>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a20      	ldr	r2, [pc, #128]	@ (800098c <SystemClock_Config+0xcc>)
 800090a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800090e:	6013      	str	r3, [r2, #0]
 8000910:	4b1e      	ldr	r3, [pc, #120]	@ (800098c <SystemClock_Config+0xcc>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800091c:	2302      	movs	r3, #2
 800091e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000920:	2301      	movs	r3, #1
 8000922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000924:	2310      	movs	r3, #16
 8000926:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000928:	2302      	movs	r3, #2
 800092a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800092c:	2300      	movs	r3, #0
 800092e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000930:	2308      	movs	r3, #8
 8000932:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000934:	23c0      	movs	r3, #192	@ 0xc0
 8000936:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000938:	2308      	movs	r3, #8
 800093a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800093c:	2308      	movs	r3, #8
 800093e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	4618      	mov	r0, r3
 8000946:	f001 f84d 	bl	80019e4 <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000950:	f000 f830 	bl	80009b4 <Error_Handler>
//    Error_Handler();
//  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000954:	230f      	movs	r3, #15
 8000956:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000958:	2302      	movs	r3, #2
 800095a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000960:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000964:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	2101      	movs	r1, #1
 8000970:	4618      	mov	r0, r3
 8000972:	f001 faaf 	bl	8001ed4 <HAL_RCC_ClockConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800097c:	f000 f81a 	bl	80009b4 <Error_Handler>
  }
}
 8000980:	bf00      	nop
 8000982:	3750      	adds	r7, #80	@ 0x50
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a04      	ldr	r2, [pc, #16]	@ (80009b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d101      	bne.n	80009a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009a2:	f000 fa1b 	bl	8000ddc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40001000 	.word	0x40001000

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <Error_Handler+0x8>

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ce:	4a0f      	ldr	r2, [pc, #60]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009d6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ea:	4a08      	ldr	r2, [pc, #32]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08e      	sub	sp, #56	@ 0x38
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	4b33      	ldr	r3, [pc, #204]	@ (8000af4 <HAL_InitTick+0xe4>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a28:	4a32      	ldr	r2, [pc, #200]	@ (8000af4 <HAL_InitTick+0xe4>)
 8000a2a:	f043 0310 	orr.w	r3, r3, #16
 8000a2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a30:	4b30      	ldr	r3, [pc, #192]	@ (8000af4 <HAL_InitTick+0xe4>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a34:	f003 0310 	and.w	r3, r3, #16
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a3c:	f107 0210 	add.w	r2, r7, #16
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4611      	mov	r1, r2
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 fc24 	bl	8002294 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d103      	bne.n	8000a5e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a56:	f001 fbf5 	bl	8002244 <HAL_RCC_GetPCLK1Freq>
 8000a5a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a5c:	e004      	b.n	8000a68 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a5e:	f001 fbf1 	bl	8002244 <HAL_RCC_GetPCLK1Freq>
 8000a62:	4603      	mov	r3, r0
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a6a:	4a23      	ldr	r2, [pc, #140]	@ (8000af8 <HAL_InitTick+0xe8>)
 8000a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a70:	0c9b      	lsrs	r3, r3, #18
 8000a72:	3b01      	subs	r3, #1
 8000a74:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a76:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <HAL_InitTick+0xec>)
 8000a78:	4a21      	ldr	r2, [pc, #132]	@ (8000b00 <HAL_InitTick+0xf0>)
 8000a7a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000afc <HAL_InitTick+0xec>)
 8000a7e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a82:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a84:	4a1d      	ldr	r2, [pc, #116]	@ (8000afc <HAL_InitTick+0xec>)
 8000a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a88:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000afc <HAL_InitTick+0xec>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a90:	4b1a      	ldr	r3, [pc, #104]	@ (8000afc <HAL_InitTick+0xec>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a96:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <HAL_InitTick+0xec>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a9c:	4817      	ldr	r0, [pc, #92]	@ (8000afc <HAL_InitTick+0xec>)
 8000a9e:	f001 fc2b 	bl	80022f8 <HAL_TIM_Base_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000aa8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d11b      	bne.n	8000ae8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ab0:	4812      	ldr	r0, [pc, #72]	@ (8000afc <HAL_InitTick+0xec>)
 8000ab2:	f001 fc7b 	bl	80023ac <HAL_TIM_Base_Start_IT>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000abc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d111      	bne.n	8000ae8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ac4:	2036      	movs	r0, #54	@ 0x36
 8000ac6:	f000 faa1 	bl	800100c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b0f      	cmp	r3, #15
 8000ace:	d808      	bhi.n	8000ae2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	2036      	movs	r0, #54	@ 0x36
 8000ad6:	f000 fa7d 	bl	8000fd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ada:	4a0a      	ldr	r2, [pc, #40]	@ (8000b04 <HAL_InitTick+0xf4>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6013      	str	r3, [r2, #0]
 8000ae0:	e002      	b.n	8000ae8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ae8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3738      	adds	r7, #56	@ 0x38
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800
 8000af8:	431bde83 	.word	0x431bde83
 8000afc:	20000258 	.word	0x20000258
 8000b00:	40001000 	.word	0x40001000
 8000b04:	20000004 	.word	0x20000004

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <NMI_Handler+0x4>

08000b10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <HardFault_Handler+0x4>

08000b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <MemManage_Handler+0x4>

08000b20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b6c:	4802      	ldr	r0, [pc, #8]	@ (8000b78 <TIM6_DAC_IRQHandler+0x10>)
 8000b6e:	f001 fc8d 	bl	800248c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000258 	.word	0x20000258

08000b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <SystemInit+0x20>)
 8000b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b86:	4a05      	ldr	r2, [pc, #20]	@ (8000b9c <SystemInit+0x20>)
 8000b88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <MX_UART4_Init+0x4c>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	@ (8000bf0 <MX_UART4_Init+0x50>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000baa:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <MX_UART4_Init+0x4c>)
 8000bac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <MX_UART4_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <MX_UART4_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <MX_UART4_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <MX_UART4_Init+0x4c>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <MX_UART4_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <MX_UART4_Init+0x4c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	@ (8000bec <MX_UART4_Init+0x4c>)
 8000bd8:	f001 fe30 	bl	800283c <HAL_UART_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000be2:	f7ff fee7 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200002a0 	.word	0x200002a0
 8000bf0:	40004c00 	.word	0x40004c00

08000bf4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	@ (8000c44 <MX_USART1_UART_Init+0x50>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c2c:	f001 fe06 	bl	800283c <HAL_UART_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c36:	f7ff febd 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200002e8 	.word	0x200002e8
 8000c44:	40011000 	.word	0x40011000

08000c48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08c      	sub	sp, #48	@ 0x30
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a32      	ldr	r2, [pc, #200]	@ (8000d30 <HAL_UART_MspInit+0xe8>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d12d      	bne.n	8000cc6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
 8000c6e:	4b31      	ldr	r3, [pc, #196]	@ (8000d34 <HAL_UART_MspInit+0xec>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c72:	4a30      	ldr	r2, [pc, #192]	@ (8000d34 <HAL_UART_MspInit+0xec>)
 8000c74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	@ (8000d34 <HAL_UART_MspInit+0xec>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c82:	61bb      	str	r3, [r7, #24]
 8000c84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d34 <HAL_UART_MspInit+0xec>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a29      	ldr	r2, [pc, #164]	@ (8000d34 <HAL_UART_MspInit+0xec>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b27      	ldr	r3, [pc, #156]	@ (8000d34 <HAL_UART_MspInit+0xec>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_RXC11_Pin;
 8000ca2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000cb4:	2308      	movs	r3, #8
 8000cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	481e      	ldr	r0, [pc, #120]	@ (8000d38 <HAL_UART_MspInit+0xf0>)
 8000cc0:	f000 fcda 	bl	8001678 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000cc4:	e030      	b.n	8000d28 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART1)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a1c      	ldr	r2, [pc, #112]	@ (8000d3c <HAL_UART_MspInit+0xf4>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d12b      	bne.n	8000d28 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	4b17      	ldr	r3, [pc, #92]	@ (8000d34 <HAL_UART_MspInit+0xec>)
 8000cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd8:	4a16      	ldr	r2, [pc, #88]	@ (8000d34 <HAL_UART_MspInit+0xec>)
 8000cda:	f043 0310 	orr.w	r3, r3, #16
 8000cde:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ce0:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <HAL_UART_MspInit+0xec>)
 8000ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce4:	f003 0310 	and.w	r3, r3, #16
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <HAL_UART_MspInit+0xec>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf4:	4a0f      	ldr	r2, [pc, #60]	@ (8000d34 <HAL_UART_MspInit+0xec>)
 8000cf6:	f043 0302 	orr.w	r3, r3, #2
 8000cfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d34 <HAL_UART_MspInit+0xec>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d00:	f003 0302 	and.w	r3, r3, #2
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART_LIN_TX_Pin|UART_LIN_RX_Pin;
 8000d08:	23c0      	movs	r3, #192	@ 0xc0
 8000d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d18:	2307      	movs	r3, #7
 8000d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	4619      	mov	r1, r3
 8000d22:	4807      	ldr	r0, [pc, #28]	@ (8000d40 <HAL_UART_MspInit+0xf8>)
 8000d24:	f000 fca8 	bl	8001678 <HAL_GPIO_Init>
}
 8000d28:	bf00      	nop
 8000d2a:	3730      	adds	r7, #48	@ 0x30
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40004c00 	.word	0x40004c00
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40011000 	.word	0x40011000
 8000d40:	40020400 	.word	0x40020400

08000d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d48:	f7ff ff18 	bl	8000b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d4c:	480c      	ldr	r0, [pc, #48]	@ (8000d80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d4e:	490d      	ldr	r1, [pc, #52]	@ (8000d84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d50:	4a0d      	ldr	r2, [pc, #52]	@ (8000d88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0a      	ldr	r2, [pc, #40]	@ (8000d8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d64:	4c0a      	ldr	r4, [pc, #40]	@ (8000d90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d72:	f002 f82f 	bl	8002dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d76:	f7ff fd49 	bl	800080c <main>
  bx  lr    
 8000d7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d88:	08002e5c 	.word	0x08002e5c
  ldr r2, =_sbss
 8000d8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d90:	20000334 	.word	0x20000334

08000d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd8 <HAL_Init+0x40>)
 8000da2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da8:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <HAL_Init+0x40>)
 8000dae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db4:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a07      	ldr	r2, [pc, #28]	@ (8000dd8 <HAL_Init+0x40>)
 8000dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 f8fc 	bl	8000fbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc6:	200f      	movs	r0, #15
 8000dc8:	f7ff fe22 	bl	8000a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dcc:	f7ff fdf8 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023c00 	.word	0x40023c00

08000ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	@ (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000330 	.word	0x20000330

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b03      	ldr	r3, [pc, #12]	@ (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000330 	.word	0x20000330

08000e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e24:	f7ff ffee 	bl	8000e04 <HAL_GetTick>
 8000e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e34:	d005      	beq.n	8000e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e36:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <HAL_Delay+0x44>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4413      	add	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e42:	bf00      	nop
 8000e44:	f7ff ffde 	bl	8000e04 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d8f7      	bhi.n	8000e44 <HAL_Delay+0x28>
  {
  }
}
 8000e54:	bf00      	nop
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008

08000e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e80:	4013      	ands	r3, r2
 8000e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e96:	4a04      	ldr	r2, [pc, #16]	@ (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	60d3      	str	r3, [r2, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb0:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	f003 0307 	and.w	r3, r3, #7
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	db0b      	blt.n	8000ef2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 021f 	and.w	r2, r3, #31
 8000ee0:	4907      	ldr	r1, [pc, #28]	@ (8000f00 <__NVIC_EnableIRQ+0x38>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	2001      	movs	r0, #1
 8000eea:	fa00 f202 	lsl.w	r2, r0, r2
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000e100 	.word	0xe000e100

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	@ (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	@ (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	@ 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	@ 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ff4c 	bl	8000e64 <__NVIC_SetPriorityGrouping>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe6:	f7ff ff61 	bl	8000eac <__NVIC_GetPriorityGrouping>
 8000fea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	68b9      	ldr	r1, [r7, #8]
 8000ff0:	6978      	ldr	r0, [r7, #20]
 8000ff2:	f7ff ffb1 	bl	8000f58 <NVIC_EncodePriority>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ff80 	bl	8000f04 <__NVIC_SetPriority>
}
 8001004:	bf00      	nop
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff54 	bl	8000ec8 <__NVIC_EnableIRQ>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e06c      	b.n	8001114 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001040:	2b00      	cmp	r3, #0
 8001042:	d106      	bne.n	8001052 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2223      	movs	r2, #35	@ 0x23
 8001048:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff fa81 	bl	8000554 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	4b31      	ldr	r3, [pc, #196]	@ (800111c <HAL_ETH_Init+0xf4>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105a:	4a30      	ldr	r2, [pc, #192]	@ (800111c <HAL_ETH_Init+0xf4>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001060:	6453      	str	r3, [r2, #68]	@ 0x44
 8001062:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <HAL_ETH_Init+0xf4>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800106e:	4b2c      	ldr	r3, [pc, #176]	@ (8001120 <HAL_ETH_Init+0xf8>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	4a2b      	ldr	r2, [pc, #172]	@ (8001120 <HAL_ETH_Init+0xf8>)
 8001074:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001078:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800107a:	4b29      	ldr	r3, [pc, #164]	@ (8001120 <HAL_ETH_Init+0xf8>)
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	4927      	ldr	r1, [pc, #156]	@ (8001120 <HAL_ETH_Init+0xf8>)
 8001084:	4313      	orrs	r3, r2
 8001086:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001088:	4b25      	ldr	r3, [pc, #148]	@ (8001120 <HAL_ETH_Init+0xf8>)
 800108a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	6812      	ldr	r2, [r2, #0]
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80010a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010a4:	f7ff feae 	bl	8000e04 <HAL_GetTick>
 80010a8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80010aa:	e011      	b.n	80010d0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80010ac:	f7ff feaa 	bl	8000e04 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010ba:	d909      	bls.n	80010d0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2204      	movs	r2, #4
 80010c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	22e0      	movs	r2, #224	@ 0xe0
 80010c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e021      	b.n	8001114 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1e4      	bne.n	80010ac <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 f958 	bl	8001398 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 f9ff 	bl	80014ec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 fa55 	bl	800159e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	461a      	mov	r2, r3
 80010fa:	2100      	movs	r1, #0
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f000 f9bd 	bl	800147c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2210      	movs	r2, #16
 800110e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40023800 	.word	0x40023800
 8001120:	40013800 	.word	0x40013800

08001124 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4b51      	ldr	r3, [pc, #324]	@ (8001280 <ETH_SetMACConfig+0x15c>)
 800113a:	4013      	ands	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	7c1b      	ldrb	r3, [r3, #16]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d102      	bne.n	800114c <ETH_SetMACConfig+0x28>
 8001146:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800114a:	e000      	b.n	800114e <ETH_SetMACConfig+0x2a>
 800114c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	7c5b      	ldrb	r3, [r3, #17]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d102      	bne.n	800115c <ETH_SetMACConfig+0x38>
 8001156:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800115a:	e000      	b.n	800115e <ETH_SetMACConfig+0x3a>
 800115c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800115e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001164:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	7fdb      	ldrb	r3, [r3, #31]
 800116a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800116c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001172:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	7f92      	ldrb	r2, [r2, #30]
 8001178:	2a00      	cmp	r2, #0
 800117a:	d102      	bne.n	8001182 <ETH_SetMACConfig+0x5e>
 800117c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001180:	e000      	b.n	8001184 <ETH_SetMACConfig+0x60>
 8001182:	2200      	movs	r2, #0
                        macconf->Speed |
 8001184:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	7f1b      	ldrb	r3, [r3, #28]
 800118a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800118c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001192:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	791b      	ldrb	r3, [r3, #4]
 8001198:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800119a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	f892 2020 	ldrb.w	r2, [r2, #32]
 80011a2:	2a00      	cmp	r2, #0
 80011a4:	d102      	bne.n	80011ac <ETH_SetMACConfig+0x88>
 80011a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011aa:	e000      	b.n	80011ae <ETH_SetMACConfig+0x8a>
 80011ac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80011ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	7bdb      	ldrb	r3, [r3, #15]
 80011b4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80011b6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80011bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80011c4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80011c6:	4313      	orrs	r3, r2
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80011de:	2001      	movs	r0, #1
 80011e0:	f7ff fe1c 	bl	8000e1c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80011fa:	4013      	ands	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001202:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800120a:	2a00      	cmp	r2, #0
 800120c:	d101      	bne.n	8001212 <ETH_SetMACConfig+0xee>
 800120e:	2280      	movs	r2, #128	@ 0x80
 8001210:	e000      	b.n	8001214 <ETH_SetMACConfig+0xf0>
 8001212:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001214:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800121a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001222:	2a01      	cmp	r2, #1
 8001224:	d101      	bne.n	800122a <ETH_SetMACConfig+0x106>
 8001226:	2208      	movs	r2, #8
 8001228:	e000      	b.n	800122c <ETH_SetMACConfig+0x108>
 800122a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800122c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001234:	2a01      	cmp	r2, #1
 8001236:	d101      	bne.n	800123c <ETH_SetMACConfig+0x118>
 8001238:	2204      	movs	r2, #4
 800123a:	e000      	b.n	800123e <ETH_SetMACConfig+0x11a>
 800123c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800123e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001246:	2a01      	cmp	r2, #1
 8001248:	d101      	bne.n	800124e <ETH_SetMACConfig+0x12a>
 800124a:	2202      	movs	r2, #2
 800124c:	e000      	b.n	8001250 <ETH_SetMACConfig+0x12c>
 800124e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001250:	4313      	orrs	r3, r2
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	4313      	orrs	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001268:	2001      	movs	r0, #1
 800126a:	f7ff fdd7 	bl	8000e1c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	619a      	str	r2, [r3, #24]
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	ff20810f 	.word	0xff20810f

08001284 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	4b3d      	ldr	r3, [pc, #244]	@ (8001394 <ETH_SetDMAConfig+0x110>)
 800129e:	4013      	ands	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	7b1b      	ldrb	r3, [r3, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d102      	bne.n	80012b0 <ETH_SetDMAConfig+0x2c>
 80012aa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80012ae:	e000      	b.n	80012b2 <ETH_SetDMAConfig+0x2e>
 80012b0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	7b5b      	ldrb	r3, [r3, #13]
 80012b6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80012b8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	7f52      	ldrb	r2, [r2, #29]
 80012be:	2a00      	cmp	r2, #0
 80012c0:	d102      	bne.n	80012c8 <ETH_SetDMAConfig+0x44>
 80012c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80012c6:	e000      	b.n	80012ca <ETH_SetDMAConfig+0x46>
 80012c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80012ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	7b9b      	ldrb	r3, [r3, #14]
 80012d0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80012d2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80012d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	7f1b      	ldrb	r3, [r3, #28]
 80012de:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80012e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	7f9b      	ldrb	r3, [r3, #30]
 80012e6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80012e8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80012ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012f6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80012f8:	4313      	orrs	r3, r2
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001308:	461a      	mov	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800131a:	2001      	movs	r0, #1
 800131c:	f7ff fd7e 	bl	8000e1c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001328:	461a      	mov	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	791b      	ldrb	r3, [r3, #4]
 8001332:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001338:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800133e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001344:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800134c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800134e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001354:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001356:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800135c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6812      	ldr	r2, [r2, #0]
 8001362:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001366:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800136a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001378:	2001      	movs	r0, #1
 800137a:	f7ff fd4f 	bl	8000e1c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001386:	461a      	mov	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	f8de3f23 	.word	0xf8de3f23

08001398 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b0a6      	sub	sp, #152	@ 0x98
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80013a0:	2301      	movs	r3, #1
 80013a2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80013a6:	2301      	movs	r3, #1
 80013a8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80013ac:	2300      	movs	r3, #0
 80013ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80013b6:	2301      	movs	r3, #1
 80013b8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80013c2:	2301      	movs	r3, #1
 80013c4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80013d4:	2300      	movs	r3, #0
 80013d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80013fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001400:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001404:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800140c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001410:	4619      	mov	r1, r3
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff fe86 	bl	8001124 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001418:	2301      	movs	r3, #1
 800141a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800141c:	2301      	movs	r3, #1
 800141e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001420:	2301      	movs	r3, #1
 8001422:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001426:	2301      	movs	r3, #1
 8001428:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800143a:	2300      	movs	r3, #0
 800143c:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800143e:	2301      	movs	r3, #1
 8001440:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001444:	2301      	movs	r3, #1
 8001446:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001448:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800144c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800144e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001452:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001454:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001458:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800145a:	2301      	movs	r3, #1
 800145c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001460:	2300      	movs	r3, #0
 8001462:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	4619      	mov	r1, r3
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ff08 	bl	8001284 <ETH_SetDMAConfig>
}
 8001474:	bf00      	nop
 8001476:	3798      	adds	r7, #152	@ 0x98
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800147c:	b480      	push	{r7}
 800147e:	b087      	sub	sp, #28
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3305      	adds	r3, #5
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	3204      	adds	r2, #4
 8001494:	7812      	ldrb	r2, [r2, #0]
 8001496:	4313      	orrs	r3, r2
 8001498:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <ETH_MACAddressConfig+0x68>)
 800149e:	4413      	add	r3, r2
 80014a0:	461a      	mov	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3303      	adds	r3, #3
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	061a      	lsls	r2, r3, #24
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3302      	adds	r3, #2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	041b      	lsls	r3, r3, #16
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3301      	adds	r3, #1
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	4313      	orrs	r3, r2
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	7812      	ldrb	r2, [r2, #0]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <ETH_MACAddressConfig+0x6c>)
 80014ce:	4413      	add	r3, r2
 80014d0:	461a      	mov	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	6013      	str	r3, [r2, #0]
}
 80014d6:	bf00      	nop
 80014d8:	371c      	adds	r7, #28
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40028040 	.word	0x40028040
 80014e8:	40028044 	.word	0x40028044

080014ec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	e03e      	b.n	8001578 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68d9      	ldr	r1, [r3, #12]
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	440b      	add	r3, r1
 800150a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	2200      	movs	r2, #0
 8001516:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	3206      	adds	r2, #6
 800152c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d80c      	bhi.n	800155c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68d9      	ldr	r1, [r3, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	440b      	add	r3, r1
 8001554:	461a      	mov	r2, r3
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	e004      	b.n	8001566 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	461a      	mov	r2, r3
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	3301      	adds	r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2b03      	cmp	r3, #3
 800157c:	d9bd      	bls.n	80014fa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001590:	611a      	str	r2, [r3, #16]
}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800159e:	b480      	push	{r7}
 80015a0:	b085      	sub	sp, #20
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	e046      	b.n	800163a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6919      	ldr	r1, [r3, #16]
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	440b      	add	r3, r1
 80015bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2200      	movs	r2, #0
 80015c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	2200      	movs	r2, #0
 80015da:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2200      	movs	r2, #0
 80015e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80015e8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 80015f0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80015fe:	68b9      	ldr	r1, [r7, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	3212      	adds	r2, #18
 8001606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d80c      	bhi.n	800162a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6919      	ldr	r1, [r3, #16]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	440b      	add	r3, r1
 8001622:	461a      	mov	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	60da      	str	r2, [r3, #12]
 8001628:	e004      	b.n	8001634 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	461a      	mov	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3301      	adds	r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2b03      	cmp	r3, #3
 800163e:	d9b5      	bls.n	80015ac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691a      	ldr	r2, [r3, #16]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800166a:	60da      	str	r2, [r3, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	@ 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800168a:	2300      	movs	r3, #0
 800168c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
 8001692:	e16b      	b.n	800196c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001694:	2201      	movs	r2, #1
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	f040 815a 	bne.w	8001966 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d005      	beq.n	80016ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d130      	bne.n	800172c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	2203      	movs	r2, #3
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001700:	2201      	movs	r2, #1
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	f003 0201 	and.w	r2, r3, #1
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	2b03      	cmp	r3, #3
 8001736:	d017      	beq.n	8001768 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d123      	bne.n	80017bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	08da      	lsrs	r2, r3, #3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3208      	adds	r2, #8
 800177c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	220f      	movs	r2, #15
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	691a      	ldr	r2, [r3, #16]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	08da      	lsrs	r2, r3, #3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3208      	adds	r2, #8
 80017b6:	69b9      	ldr	r1, [r7, #24]
 80017b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	2203      	movs	r2, #3
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0203 	and.w	r2, r3, #3
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 80b4 	beq.w	8001966 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b60      	ldr	r3, [pc, #384]	@ (8001984 <HAL_GPIO_Init+0x30c>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001806:	4a5f      	ldr	r2, [pc, #380]	@ (8001984 <HAL_GPIO_Init+0x30c>)
 8001808:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800180c:	6453      	str	r3, [r2, #68]	@ 0x44
 800180e:	4b5d      	ldr	r3, [pc, #372]	@ (8001984 <HAL_GPIO_Init+0x30c>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800181a:	4a5b      	ldr	r2, [pc, #364]	@ (8001988 <HAL_GPIO_Init+0x310>)
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	089b      	lsrs	r3, r3, #2
 8001820:	3302      	adds	r3, #2
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	220f      	movs	r2, #15
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a52      	ldr	r2, [pc, #328]	@ (800198c <HAL_GPIO_Init+0x314>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d02b      	beq.n	800189e <HAL_GPIO_Init+0x226>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a51      	ldr	r2, [pc, #324]	@ (8001990 <HAL_GPIO_Init+0x318>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d025      	beq.n	800189a <HAL_GPIO_Init+0x222>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a50      	ldr	r2, [pc, #320]	@ (8001994 <HAL_GPIO_Init+0x31c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d01f      	beq.n	8001896 <HAL_GPIO_Init+0x21e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4f      	ldr	r2, [pc, #316]	@ (8001998 <HAL_GPIO_Init+0x320>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d019      	beq.n	8001892 <HAL_GPIO_Init+0x21a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a4e      	ldr	r2, [pc, #312]	@ (800199c <HAL_GPIO_Init+0x324>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d013      	beq.n	800188e <HAL_GPIO_Init+0x216>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4d      	ldr	r2, [pc, #308]	@ (80019a0 <HAL_GPIO_Init+0x328>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d00d      	beq.n	800188a <HAL_GPIO_Init+0x212>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4c      	ldr	r2, [pc, #304]	@ (80019a4 <HAL_GPIO_Init+0x32c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d007      	beq.n	8001886 <HAL_GPIO_Init+0x20e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4b      	ldr	r2, [pc, #300]	@ (80019a8 <HAL_GPIO_Init+0x330>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d101      	bne.n	8001882 <HAL_GPIO_Init+0x20a>
 800187e:	2307      	movs	r3, #7
 8001880:	e00e      	b.n	80018a0 <HAL_GPIO_Init+0x228>
 8001882:	2308      	movs	r3, #8
 8001884:	e00c      	b.n	80018a0 <HAL_GPIO_Init+0x228>
 8001886:	2306      	movs	r3, #6
 8001888:	e00a      	b.n	80018a0 <HAL_GPIO_Init+0x228>
 800188a:	2305      	movs	r3, #5
 800188c:	e008      	b.n	80018a0 <HAL_GPIO_Init+0x228>
 800188e:	2304      	movs	r3, #4
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x228>
 8001892:	2303      	movs	r3, #3
 8001894:	e004      	b.n	80018a0 <HAL_GPIO_Init+0x228>
 8001896:	2302      	movs	r3, #2
 8001898:	e002      	b.n	80018a0 <HAL_GPIO_Init+0x228>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <HAL_GPIO_Init+0x228>
 800189e:	2300      	movs	r3, #0
 80018a0:	69fa      	ldr	r2, [r7, #28]
 80018a2:	f002 0203 	and.w	r2, r2, #3
 80018a6:	0092      	lsls	r2, r2, #2
 80018a8:	4093      	lsls	r3, r2
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018b0:	4935      	ldr	r1, [pc, #212]	@ (8001988 <HAL_GPIO_Init+0x310>)
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018be:	4b3b      	ldr	r3, [pc, #236]	@ (80019ac <HAL_GPIO_Init+0x334>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018e2:	4a32      	ldr	r2, [pc, #200]	@ (80019ac <HAL_GPIO_Init+0x334>)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018e8:	4b30      	ldr	r3, [pc, #192]	@ (80019ac <HAL_GPIO_Init+0x334>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800190c:	4a27      	ldr	r2, [pc, #156]	@ (80019ac <HAL_GPIO_Init+0x334>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001912:	4b26      	ldr	r3, [pc, #152]	@ (80019ac <HAL_GPIO_Init+0x334>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001936:	4a1d      	ldr	r2, [pc, #116]	@ (80019ac <HAL_GPIO_Init+0x334>)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800193c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ac <HAL_GPIO_Init+0x334>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001960:	4a12      	ldr	r2, [pc, #72]	@ (80019ac <HAL_GPIO_Init+0x334>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3301      	adds	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	2b0f      	cmp	r3, #15
 8001970:	f67f ae90 	bls.w	8001694 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3724      	adds	r7, #36	@ 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	40013800 	.word	0x40013800
 800198c:	40020000 	.word	0x40020000
 8001990:	40020400 	.word	0x40020400
 8001994:	40020800 	.word	0x40020800
 8001998:	40020c00 	.word	0x40020c00
 800199c:	40021000 	.word	0x40021000
 80019a0:	40021400 	.word	0x40021400
 80019a4:	40021800 	.word	0x40021800
 80019a8:	40021c00 	.word	0x40021c00
 80019ac:	40013c00 	.word	0x40013c00

080019b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	807b      	strh	r3, [r7, #2]
 80019bc:	4613      	mov	r3, r2
 80019be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019c0:	787b      	ldrb	r3, [r7, #1]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019c6:	887a      	ldrh	r2, [r7, #2]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019cc:	e003      	b.n	80019d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ce:	887b      	ldrh	r3, [r7, #2]
 80019d0:	041a      	lsls	r2, r3, #16
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	619a      	str	r2, [r3, #24]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e267      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d075      	beq.n	8001aee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a02:	4b88      	ldr	r3, [pc, #544]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 030c 	and.w	r3, r3, #12
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d00c      	beq.n	8001a28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a0e:	4b85      	ldr	r3, [pc, #532]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d112      	bne.n	8001a40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a1a:	4b82      	ldr	r3, [pc, #520]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a26:	d10b      	bne.n	8001a40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a28:	4b7e      	ldr	r3, [pc, #504]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d05b      	beq.n	8001aec <HAL_RCC_OscConfig+0x108>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d157      	bne.n	8001aec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e242      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a48:	d106      	bne.n	8001a58 <HAL_RCC_OscConfig+0x74>
 8001a4a:	4b76      	ldr	r3, [pc, #472]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a75      	ldr	r2, [pc, #468]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e01d      	b.n	8001a94 <HAL_RCC_OscConfig+0xb0>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a60:	d10c      	bne.n	8001a7c <HAL_RCC_OscConfig+0x98>
 8001a62:	4b70      	ldr	r3, [pc, #448]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6f      	ldr	r2, [pc, #444]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001a68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	4b6d      	ldr	r3, [pc, #436]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a6c      	ldr	r2, [pc, #432]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	e00b      	b.n	8001a94 <HAL_RCC_OscConfig+0xb0>
 8001a7c:	4b69      	ldr	r3, [pc, #420]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a68      	ldr	r2, [pc, #416]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	4b66      	ldr	r3, [pc, #408]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a65      	ldr	r2, [pc, #404]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001a8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d013      	beq.n	8001ac4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f9b2 	bl	8000e04 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa4:	f7ff f9ae 	bl	8000e04 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	@ 0x64
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e207      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab6:	4b5b      	ldr	r3, [pc, #364]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0xc0>
 8001ac2:	e014      	b.n	8001aee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff f99e 	bl	8000e04 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001acc:	f7ff f99a 	bl	8000e04 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	@ 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e1f3      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ade:	4b51      	ldr	r3, [pc, #324]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0xe8>
 8001aea:	e000      	b.n	8001aee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d063      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001afa:	4b4a      	ldr	r3, [pc, #296]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00b      	beq.n	8001b1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b06:	4b47      	ldr	r3, [pc, #284]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d11c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b12:	4b44      	ldr	r3, [pc, #272]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d116      	bne.n	8001b4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1e:	4b41      	ldr	r3, [pc, #260]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d005      	beq.n	8001b36 <HAL_RCC_OscConfig+0x152>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d001      	beq.n	8001b36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e1c7      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b36:	4b3b      	ldr	r3, [pc, #236]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	4937      	ldr	r1, [pc, #220]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4a:	e03a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d020      	beq.n	8001b96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b54:	4b34      	ldr	r3, [pc, #208]	@ (8001c28 <HAL_RCC_OscConfig+0x244>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5a:	f7ff f953 	bl	8000e04 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b62:	f7ff f94f 	bl	8000e04 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e1a8      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b74:	4b2b      	ldr	r3, [pc, #172]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b80:	4b28      	ldr	r3, [pc, #160]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4925      	ldr	r1, [pc, #148]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]
 8001b94:	e015      	b.n	8001bc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b96:	4b24      	ldr	r3, [pc, #144]	@ (8001c28 <HAL_RCC_OscConfig+0x244>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f932 	bl	8000e04 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ba4:	f7ff f92e 	bl	8000e04 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e187      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d036      	beq.n	8001c3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d016      	beq.n	8001c04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd6:	4b15      	ldr	r3, [pc, #84]	@ (8001c2c <HAL_RCC_OscConfig+0x248>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bdc:	f7ff f912 	bl	8000e04 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001be4:	f7ff f90e 	bl	8000e04 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e167      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <HAL_RCC_OscConfig+0x240>)
 8001bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0x200>
 8001c02:	e01b      	b.n	8001c3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c04:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <HAL_RCC_OscConfig+0x248>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0a:	f7ff f8fb 	bl	8000e04 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c10:	e00e      	b.n	8001c30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c12:	f7ff f8f7 	bl	8000e04 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d907      	bls.n	8001c30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e150      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4e2>
 8001c24:	40023800 	.word	0x40023800
 8001c28:	42470000 	.word	0x42470000
 8001c2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c30:	4b88      	ldr	r3, [pc, #544]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001c32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1ea      	bne.n	8001c12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 8097 	beq.w	8001d78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c4e:	4b81      	ldr	r3, [pc, #516]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10f      	bne.n	8001c7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	4b7d      	ldr	r3, [pc, #500]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	4a7c      	ldr	r2, [pc, #496]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c6a:	4b7a      	ldr	r3, [pc, #488]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c76:	2301      	movs	r3, #1
 8001c78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7a:	4b77      	ldr	r3, [pc, #476]	@ (8001e58 <HAL_RCC_OscConfig+0x474>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d118      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c86:	4b74      	ldr	r3, [pc, #464]	@ (8001e58 <HAL_RCC_OscConfig+0x474>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a73      	ldr	r2, [pc, #460]	@ (8001e58 <HAL_RCC_OscConfig+0x474>)
 8001c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c92:	f7ff f8b7 	bl	8000e04 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c9a:	f7ff f8b3 	bl	8000e04 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e10c      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cac:	4b6a      	ldr	r3, [pc, #424]	@ (8001e58 <HAL_RCC_OscConfig+0x474>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f0      	beq.n	8001c9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d106      	bne.n	8001cce <HAL_RCC_OscConfig+0x2ea>
 8001cc0:	4b64      	ldr	r3, [pc, #400]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc4:	4a63      	ldr	r2, [pc, #396]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ccc:	e01c      	b.n	8001d08 <HAL_RCC_OscConfig+0x324>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b05      	cmp	r3, #5
 8001cd4:	d10c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x30c>
 8001cd6:	4b5f      	ldr	r3, [pc, #380]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cda:	4a5e      	ldr	r2, [pc, #376]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001cdc:	f043 0304 	orr.w	r3, r3, #4
 8001ce0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ce2:	4b5c      	ldr	r3, [pc, #368]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce6:	4a5b      	ldr	r2, [pc, #364]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cee:	e00b      	b.n	8001d08 <HAL_RCC_OscConfig+0x324>
 8001cf0:	4b58      	ldr	r3, [pc, #352]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf4:	4a57      	ldr	r2, [pc, #348]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001cf6:	f023 0301 	bic.w	r3, r3, #1
 8001cfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cfc:	4b55      	ldr	r3, [pc, #340]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d00:	4a54      	ldr	r2, [pc, #336]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001d02:	f023 0304 	bic.w	r3, r3, #4
 8001d06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d015      	beq.n	8001d3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d10:	f7ff f878 	bl	8000e04 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d16:	e00a      	b.n	8001d2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d18:	f7ff f874 	bl	8000e04 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e0cb      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2e:	4b49      	ldr	r3, [pc, #292]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0ee      	beq.n	8001d18 <HAL_RCC_OscConfig+0x334>
 8001d3a:	e014      	b.n	8001d66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3c:	f7ff f862 	bl	8000e04 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d42:	e00a      	b.n	8001d5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d44:	f7ff f85e 	bl	8000e04 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e0b5      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1ee      	bne.n	8001d44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d66:	7dfb      	ldrb	r3, [r7, #23]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d105      	bne.n	8001d78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6c:	4b39      	ldr	r3, [pc, #228]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d70:	4a38      	ldr	r2, [pc, #224]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001d72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80a1 	beq.w	8001ec4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d82:	4b34      	ldr	r3, [pc, #208]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d05c      	beq.n	8001e48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d141      	bne.n	8001e1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d96:	4b31      	ldr	r3, [pc, #196]	@ (8001e5c <HAL_RCC_OscConfig+0x478>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff f832 	bl	8000e04 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da4:	f7ff f82e 	bl	8000e04 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e087      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db6:	4b27      	ldr	r3, [pc, #156]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69da      	ldr	r2, [r3, #28]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd0:	019b      	lsls	r3, r3, #6
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd8:	085b      	lsrs	r3, r3, #1
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	041b      	lsls	r3, r3, #16
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de4:	061b      	lsls	r3, r3, #24
 8001de6:	491b      	ldr	r1, [pc, #108]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dec:	4b1b      	ldr	r3, [pc, #108]	@ (8001e5c <HAL_RCC_OscConfig+0x478>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df2:	f7ff f807 	bl	8000e04 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dfa:	f7ff f803 	bl	8000e04 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e05c      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0c:	4b11      	ldr	r3, [pc, #68]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x416>
 8001e18:	e054      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1a:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <HAL_RCC_OscConfig+0x478>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7fe fff0 	bl	8000e04 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e28:	f7fe ffec 	bl	8000e04 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e045      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3a:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x444>
 8001e46:	e03d      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d107      	bne.n	8001e60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e038      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4e2>
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40007000 	.word	0x40007000
 8001e5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e60:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed0 <HAL_RCC_OscConfig+0x4ec>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d028      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d121      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d11a      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e90:	4013      	ands	r3, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d111      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea6:	085b      	lsrs	r3, r3, #1
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d107      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d001      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800

08001ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0cc      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b68      	ldr	r3, [pc, #416]	@ (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d90c      	bls.n	8001f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b65      	ldr	r3, [pc, #404]	@ (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efe:	4b63      	ldr	r3, [pc, #396]	@ (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0b8      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d020      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f28:	4b59      	ldr	r3, [pc, #356]	@ (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	4a58      	ldr	r2, [pc, #352]	@ (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f40:	4b53      	ldr	r3, [pc, #332]	@ (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4a52      	ldr	r2, [pc, #328]	@ (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f4c:	4b50      	ldr	r3, [pc, #320]	@ (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	494d      	ldr	r1, [pc, #308]	@ (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d044      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d107      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f72:	4b47      	ldr	r3, [pc, #284]	@ (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d119      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e07f      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d003      	beq.n	8001f92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f92:	4b3f      	ldr	r3, [pc, #252]	@ (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d109      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e06f      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e067      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fb2:	4b37      	ldr	r3, [pc, #220]	@ (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f023 0203 	bic.w	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	4934      	ldr	r1, [pc, #208]	@ (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc4:	f7fe ff1e 	bl	8000e04 <HAL_GetTick>
 8001fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fcc:	f7fe ff1a 	bl	8000e04 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e04f      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	4b2b      	ldr	r3, [pc, #172]	@ (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 020c 	and.w	r2, r3, #12
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d1eb      	bne.n	8001fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff4:	4b25      	ldr	r3, [pc, #148]	@ (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d20c      	bcs.n	800201c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002002:	4b22      	ldr	r3, [pc, #136]	@ (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b20      	ldr	r3, [pc, #128]	@ (800208c <HAL_RCC_ClockConfig+0x1b8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e032      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002028:	4b19      	ldr	r3, [pc, #100]	@ (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4916      	ldr	r1, [pc, #88]	@ (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002046:	4b12      	ldr	r3, [pc, #72]	@ (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	490e      	ldr	r1, [pc, #56]	@ (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800205a:	f000 f821 	bl	80020a0 <HAL_RCC_GetSysClockFreq>
 800205e:	4602      	mov	r2, r0
 8002060:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	490a      	ldr	r1, [pc, #40]	@ (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	5ccb      	ldrb	r3, [r1, r3]
 800206e:	fa22 f303 	lsr.w	r3, r2, r3
 8002072:	4a09      	ldr	r2, [pc, #36]	@ (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002076:	4b09      	ldr	r3, [pc, #36]	@ (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe fcc8 	bl	8000a10 <HAL_InitTick>

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023c00 	.word	0x40023c00
 8002090:	40023800 	.word	0x40023800
 8002094:	08002e34 	.word	0x08002e34
 8002098:	20000000 	.word	0x20000000
 800209c:	20000004 	.word	0x20000004

080020a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020a4:	b090      	sub	sp, #64	@ 0x40
 80020a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80020ac:	2300      	movs	r3, #0
 80020ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020b0:	2300      	movs	r3, #0
 80020b2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020b8:	4b59      	ldr	r3, [pc, #356]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x180>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 030c 	and.w	r3, r3, #12
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d00d      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0x40>
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	f200 80a1 	bhi.w	800220c <HAL_RCC_GetSysClockFreq+0x16c>
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d002      	beq.n	80020d4 <HAL_RCC_GetSysClockFreq+0x34>
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d003      	beq.n	80020da <HAL_RCC_GetSysClockFreq+0x3a>
 80020d2:	e09b      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020d4:	4b53      	ldr	r3, [pc, #332]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x184>)
 80020d6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80020d8:	e09b      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020da:	4b53      	ldr	r3, [pc, #332]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x188>)
 80020dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020de:	e098      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020e0:	4b4f      	ldr	r3, [pc, #316]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x180>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020ea:	4b4d      	ldr	r3, [pc, #308]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x180>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d028      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x180>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	099b      	lsrs	r3, r3, #6
 80020fc:	2200      	movs	r2, #0
 80020fe:	623b      	str	r3, [r7, #32]
 8002100:	627a      	str	r2, [r7, #36]	@ 0x24
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002108:	2100      	movs	r1, #0
 800210a:	4b47      	ldr	r3, [pc, #284]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x188>)
 800210c:	fb03 f201 	mul.w	r2, r3, r1
 8002110:	2300      	movs	r3, #0
 8002112:	fb00 f303 	mul.w	r3, r0, r3
 8002116:	4413      	add	r3, r2
 8002118:	4a43      	ldr	r2, [pc, #268]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x188>)
 800211a:	fba0 1202 	umull	r1, r2, r0, r2
 800211e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002120:	460a      	mov	r2, r1
 8002122:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002124:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002126:	4413      	add	r3, r2
 8002128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800212a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800212c:	2200      	movs	r2, #0
 800212e:	61bb      	str	r3, [r7, #24]
 8002130:	61fa      	str	r2, [r7, #28]
 8002132:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002136:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800213a:	f7fe f845 	bl	80001c8 <__aeabi_uldivmod>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4613      	mov	r3, r2
 8002144:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002146:	e053      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002148:	4b35      	ldr	r3, [pc, #212]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x180>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	099b      	lsrs	r3, r3, #6
 800214e:	2200      	movs	r2, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	617a      	str	r2, [r7, #20]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800215a:	f04f 0b00 	mov.w	fp, #0
 800215e:	4652      	mov	r2, sl
 8002160:	465b      	mov	r3, fp
 8002162:	f04f 0000 	mov.w	r0, #0
 8002166:	f04f 0100 	mov.w	r1, #0
 800216a:	0159      	lsls	r1, r3, #5
 800216c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002170:	0150      	lsls	r0, r2, #5
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	ebb2 080a 	subs.w	r8, r2, sl
 800217a:	eb63 090b 	sbc.w	r9, r3, fp
 800217e:	f04f 0200 	mov.w	r2, #0
 8002182:	f04f 0300 	mov.w	r3, #0
 8002186:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800218a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800218e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002192:	ebb2 0408 	subs.w	r4, r2, r8
 8002196:	eb63 0509 	sbc.w	r5, r3, r9
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	00eb      	lsls	r3, r5, #3
 80021a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021a8:	00e2      	lsls	r2, r4, #3
 80021aa:	4614      	mov	r4, r2
 80021ac:	461d      	mov	r5, r3
 80021ae:	eb14 030a 	adds.w	r3, r4, sl
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	eb45 030b 	adc.w	r3, r5, fp
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021c6:	4629      	mov	r1, r5
 80021c8:	028b      	lsls	r3, r1, #10
 80021ca:	4621      	mov	r1, r4
 80021cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021d0:	4621      	mov	r1, r4
 80021d2:	028a      	lsls	r2, r1, #10
 80021d4:	4610      	mov	r0, r2
 80021d6:	4619      	mov	r1, r3
 80021d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021da:	2200      	movs	r2, #0
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	60fa      	str	r2, [r7, #12]
 80021e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021e4:	f7fd fff0 	bl	80001c8 <__aeabi_uldivmod>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4613      	mov	r3, r2
 80021ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x180>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	0c1b      	lsrs	r3, r3, #16
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	3301      	adds	r3, #1
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002200:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002204:	fbb2 f3f3 	udiv	r3, r2, r3
 8002208:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800220a:	e002      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800220c:	4b05      	ldr	r3, [pc, #20]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x184>)
 800220e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002214:	4618      	mov	r0, r3
 8002216:	3740      	adds	r7, #64	@ 0x40
 8002218:	46bd      	mov	sp, r7
 800221a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800221e:	bf00      	nop
 8002220:	40023800 	.word	0x40023800
 8002224:	00f42400 	.word	0x00f42400
 8002228:	017d7840 	.word	0x017d7840

0800222c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002230:	4b03      	ldr	r3, [pc, #12]	@ (8002240 <HAL_RCC_GetHCLKFreq+0x14>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000000 	.word	0x20000000

08002244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002248:	f7ff fff0 	bl	800222c <HAL_RCC_GetHCLKFreq>
 800224c:	4602      	mov	r2, r0
 800224e:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	0a9b      	lsrs	r3, r3, #10
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	4903      	ldr	r1, [pc, #12]	@ (8002268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800225a:	5ccb      	ldrb	r3, [r1, r3]
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002260:	4618      	mov	r0, r3
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40023800 	.word	0x40023800
 8002268:	08002e44 	.word	0x08002e44

0800226c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002270:	f7ff ffdc 	bl	800222c <HAL_RCC_GetHCLKFreq>
 8002274:	4602      	mov	r2, r0
 8002276:	4b05      	ldr	r3, [pc, #20]	@ (800228c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	0b5b      	lsrs	r3, r3, #13
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	4903      	ldr	r1, [pc, #12]	@ (8002290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002282:	5ccb      	ldrb	r3, [r1, r3]
 8002284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002288:	4618      	mov	r0, r3
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40023800 	.word	0x40023800
 8002290:	08002e44 	.word	0x08002e44

08002294 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	220f      	movs	r2, #15
 80022a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80022a4:	4b12      	ldr	r3, [pc, #72]	@ (80022f0 <HAL_RCC_GetClockConfig+0x5c>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0203 	and.w	r2, r3, #3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80022b0:	4b0f      	ldr	r3, [pc, #60]	@ (80022f0 <HAL_RCC_GetClockConfig+0x5c>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80022bc:	4b0c      	ldr	r3, [pc, #48]	@ (80022f0 <HAL_RCC_GetClockConfig+0x5c>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80022c8:	4b09      	ldr	r3, [pc, #36]	@ (80022f0 <HAL_RCC_GetClockConfig+0x5c>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	08db      	lsrs	r3, r3, #3
 80022ce:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80022d6:	4b07      	ldr	r3, [pc, #28]	@ (80022f4 <HAL_RCC_GetClockConfig+0x60>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0207 	and.w	r2, r3, #7
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	601a      	str	r2, [r3, #0]
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40023c00 	.word	0x40023c00

080022f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e041      	b.n	800238e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d106      	bne.n	8002324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f839 	bl	8002396 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3304      	adds	r3, #4
 8002334:	4619      	mov	r1, r3
 8002336:	4610      	mov	r0, r2
 8002338:	f000 f9c0 	bl	80026bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d001      	beq.n	80023c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e04e      	b.n	8002462 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a23      	ldr	r2, [pc, #140]	@ (8002470 <HAL_TIM_Base_Start_IT+0xc4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d022      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x80>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023ee:	d01d      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x80>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002474 <HAL_TIM_Base_Start_IT+0xc8>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d018      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x80>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002478 <HAL_TIM_Base_Start_IT+0xcc>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d013      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x80>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a1c      	ldr	r2, [pc, #112]	@ (800247c <HAL_TIM_Base_Start_IT+0xd0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d00e      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x80>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a1b      	ldr	r2, [pc, #108]	@ (8002480 <HAL_TIM_Base_Start_IT+0xd4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d009      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x80>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a19      	ldr	r2, [pc, #100]	@ (8002484 <HAL_TIM_Base_Start_IT+0xd8>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d004      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x80>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a18      	ldr	r2, [pc, #96]	@ (8002488 <HAL_TIM_Base_Start_IT+0xdc>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d111      	bne.n	8002450 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b06      	cmp	r3, #6
 800243c:	d010      	beq.n	8002460 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f042 0201 	orr.w	r2, r2, #1
 800244c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800244e:	e007      	b.n	8002460 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0201 	orr.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40010000 	.word	0x40010000
 8002474:	40000400 	.word	0x40000400
 8002478:	40000800 	.word	0x40000800
 800247c:	40000c00 	.word	0x40000c00
 8002480:	40010400 	.word	0x40010400
 8002484:	40014000 	.word	0x40014000
 8002488:	40001800 	.word	0x40001800

0800248c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d020      	beq.n	80024f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d01b      	beq.n	80024f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0202 	mvn.w	r2, #2
 80024c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f8d2 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
 80024dc:	e005      	b.n	80024ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f8c4 	bl	800266c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f8d5 	bl	8002694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d020      	beq.n	800253c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01b      	beq.n	800253c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f06f 0204 	mvn.w	r2, #4
 800250c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2202      	movs	r2, #2
 8002512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f8ac 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
 8002528:	e005      	b.n	8002536 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f89e 	bl	800266c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f8af 	bl	8002694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d020      	beq.n	8002588 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d01b      	beq.n	8002588 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f06f 0208 	mvn.w	r2, #8
 8002558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2204      	movs	r2, #4
 800255e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f886 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
 8002574:	e005      	b.n	8002582 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f878 	bl	800266c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f889 	bl	8002694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f003 0310 	and.w	r3, r3, #16
 800258e:	2b00      	cmp	r3, #0
 8002590:	d020      	beq.n	80025d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b00      	cmp	r3, #0
 800259a:	d01b      	beq.n	80025d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0210 	mvn.w	r2, #16
 80025a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2208      	movs	r2, #8
 80025aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f860 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
 80025c0:	e005      	b.n	80025ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f852 	bl	800266c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f863 	bl	8002694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00c      	beq.n	80025f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d007      	beq.n	80025f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f06f 0201 	mvn.w	r2, #1
 80025f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7fe f9cc 	bl	8000990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00c      	beq.n	800261c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002608:	2b00      	cmp	r3, #0
 800260a:	d007      	beq.n	800261c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f906 	bl	8002828 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00c      	beq.n	8002640 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f834 	bl	80026a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f003 0320 	and.w	r3, r3, #32
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00c      	beq.n	8002664 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0220 	mvn.w	r2, #32
 800265c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f8d8 	bl	8002814 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a46      	ldr	r2, [pc, #280]	@ (80027e8 <TIM_Base_SetConfig+0x12c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d013      	beq.n	80026fc <TIM_Base_SetConfig+0x40>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026da:	d00f      	beq.n	80026fc <TIM_Base_SetConfig+0x40>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a43      	ldr	r2, [pc, #268]	@ (80027ec <TIM_Base_SetConfig+0x130>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d00b      	beq.n	80026fc <TIM_Base_SetConfig+0x40>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a42      	ldr	r2, [pc, #264]	@ (80027f0 <TIM_Base_SetConfig+0x134>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d007      	beq.n	80026fc <TIM_Base_SetConfig+0x40>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a41      	ldr	r2, [pc, #260]	@ (80027f4 <TIM_Base_SetConfig+0x138>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d003      	beq.n	80026fc <TIM_Base_SetConfig+0x40>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a40      	ldr	r2, [pc, #256]	@ (80027f8 <TIM_Base_SetConfig+0x13c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d108      	bne.n	800270e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4313      	orrs	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a35      	ldr	r2, [pc, #212]	@ (80027e8 <TIM_Base_SetConfig+0x12c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d02b      	beq.n	800276e <TIM_Base_SetConfig+0xb2>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800271c:	d027      	beq.n	800276e <TIM_Base_SetConfig+0xb2>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a32      	ldr	r2, [pc, #200]	@ (80027ec <TIM_Base_SetConfig+0x130>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d023      	beq.n	800276e <TIM_Base_SetConfig+0xb2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a31      	ldr	r2, [pc, #196]	@ (80027f0 <TIM_Base_SetConfig+0x134>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d01f      	beq.n	800276e <TIM_Base_SetConfig+0xb2>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a30      	ldr	r2, [pc, #192]	@ (80027f4 <TIM_Base_SetConfig+0x138>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d01b      	beq.n	800276e <TIM_Base_SetConfig+0xb2>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a2f      	ldr	r2, [pc, #188]	@ (80027f8 <TIM_Base_SetConfig+0x13c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d017      	beq.n	800276e <TIM_Base_SetConfig+0xb2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a2e      	ldr	r2, [pc, #184]	@ (80027fc <TIM_Base_SetConfig+0x140>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d013      	beq.n	800276e <TIM_Base_SetConfig+0xb2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a2d      	ldr	r2, [pc, #180]	@ (8002800 <TIM_Base_SetConfig+0x144>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00f      	beq.n	800276e <TIM_Base_SetConfig+0xb2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a2c      	ldr	r2, [pc, #176]	@ (8002804 <TIM_Base_SetConfig+0x148>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00b      	beq.n	800276e <TIM_Base_SetConfig+0xb2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a2b      	ldr	r2, [pc, #172]	@ (8002808 <TIM_Base_SetConfig+0x14c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d007      	beq.n	800276e <TIM_Base_SetConfig+0xb2>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a2a      	ldr	r2, [pc, #168]	@ (800280c <TIM_Base_SetConfig+0x150>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d003      	beq.n	800276e <TIM_Base_SetConfig+0xb2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a29      	ldr	r2, [pc, #164]	@ (8002810 <TIM_Base_SetConfig+0x154>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d108      	bne.n	8002780 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a10      	ldr	r2, [pc, #64]	@ (80027e8 <TIM_Base_SetConfig+0x12c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d003      	beq.n	80027b4 <TIM_Base_SetConfig+0xf8>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a12      	ldr	r2, [pc, #72]	@ (80027f8 <TIM_Base_SetConfig+0x13c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d103      	bne.n	80027bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d105      	bne.n	80027da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f023 0201 	bic.w	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	611a      	str	r2, [r3, #16]
  }
}
 80027da:	bf00      	nop
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40010000 	.word	0x40010000
 80027ec:	40000400 	.word	0x40000400
 80027f0:	40000800 	.word	0x40000800
 80027f4:	40000c00 	.word	0x40000c00
 80027f8:	40010400 	.word	0x40010400
 80027fc:	40014000 	.word	0x40014000
 8002800:	40014400 	.word	0x40014400
 8002804:	40014800 	.word	0x40014800
 8002808:	40001800 	.word	0x40001800
 800280c:	40001c00 	.word	0x40001c00
 8002810:	40002000 	.word	0x40002000

08002814 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e042      	b.n	80028d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7fe f9f0 	bl	8000c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2224      	movs	r2, #36	@ 0x24
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800287e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f82b 	bl	80028dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002894:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028e0:	b0c0      	sub	sp, #256	@ 0x100
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80028f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f8:	68d9      	ldr	r1, [r3, #12]
 80028fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	ea40 0301 	orr.w	r3, r0, r1
 8002904:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	431a      	orrs	r2, r3
 8002914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	431a      	orrs	r2, r3
 800291c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002934:	f021 010c 	bic.w	r1, r1, #12
 8002938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002942:	430b      	orrs	r3, r1
 8002944:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002956:	6999      	ldr	r1, [r3, #24]
 8002958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	ea40 0301 	orr.w	r3, r0, r1
 8002962:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	4b8f      	ldr	r3, [pc, #572]	@ (8002ba8 <UART_SetConfig+0x2cc>)
 800296c:	429a      	cmp	r2, r3
 800296e:	d005      	beq.n	800297c <UART_SetConfig+0xa0>
 8002970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	4b8d      	ldr	r3, [pc, #564]	@ (8002bac <UART_SetConfig+0x2d0>)
 8002978:	429a      	cmp	r2, r3
 800297a:	d104      	bne.n	8002986 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800297c:	f7ff fc76 	bl	800226c <HAL_RCC_GetPCLK2Freq>
 8002980:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002984:	e003      	b.n	800298e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002986:	f7ff fc5d 	bl	8002244 <HAL_RCC_GetPCLK1Freq>
 800298a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800298e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002998:	f040 810c 	bne.w	8002bb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800299c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029a0:	2200      	movs	r2, #0
 80029a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80029a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80029aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80029ae:	4622      	mov	r2, r4
 80029b0:	462b      	mov	r3, r5
 80029b2:	1891      	adds	r1, r2, r2
 80029b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80029b6:	415b      	adcs	r3, r3
 80029b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029be:	4621      	mov	r1, r4
 80029c0:	eb12 0801 	adds.w	r8, r2, r1
 80029c4:	4629      	mov	r1, r5
 80029c6:	eb43 0901 	adc.w	r9, r3, r1
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029de:	4690      	mov	r8, r2
 80029e0:	4699      	mov	r9, r3
 80029e2:	4623      	mov	r3, r4
 80029e4:	eb18 0303 	adds.w	r3, r8, r3
 80029e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80029ec:	462b      	mov	r3, r5
 80029ee:	eb49 0303 	adc.w	r3, r9, r3
 80029f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80029f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a02:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	18db      	adds	r3, r3, r3
 8002a0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a10:	4613      	mov	r3, r2
 8002a12:	eb42 0303 	adc.w	r3, r2, r3
 8002a16:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a20:	f7fd fbd2 	bl	80001c8 <__aeabi_uldivmod>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4b61      	ldr	r3, [pc, #388]	@ (8002bb0 <UART_SetConfig+0x2d4>)
 8002a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	011c      	lsls	r4, r3, #4
 8002a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a36:	2200      	movs	r2, #0
 8002a38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a3c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a44:	4642      	mov	r2, r8
 8002a46:	464b      	mov	r3, r9
 8002a48:	1891      	adds	r1, r2, r2
 8002a4a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a4c:	415b      	adcs	r3, r3
 8002a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a54:	4641      	mov	r1, r8
 8002a56:	eb12 0a01 	adds.w	sl, r2, r1
 8002a5a:	4649      	mov	r1, r9
 8002a5c:	eb43 0b01 	adc.w	fp, r3, r1
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a74:	4692      	mov	sl, r2
 8002a76:	469b      	mov	fp, r3
 8002a78:	4643      	mov	r3, r8
 8002a7a:	eb1a 0303 	adds.w	r3, sl, r3
 8002a7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a82:	464b      	mov	r3, r9
 8002a84:	eb4b 0303 	adc.w	r3, fp, r3
 8002a88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a98:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	18db      	adds	r3, r3, r3
 8002aa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	eb42 0303 	adc.w	r3, r2, r3
 8002aac:	647b      	str	r3, [r7, #68]	@ 0x44
 8002aae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002ab2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002ab6:	f7fd fb87 	bl	80001c8 <__aeabi_uldivmod>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb0 <UART_SetConfig+0x2d4>)
 8002ac2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	2264      	movs	r2, #100	@ 0x64
 8002aca:	fb02 f303 	mul.w	r3, r2, r3
 8002ace:	1acb      	subs	r3, r1, r3
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002ad6:	4b36      	ldr	r3, [pc, #216]	@ (8002bb0 <UART_SetConfig+0x2d4>)
 8002ad8:	fba3 2302 	umull	r2, r3, r3, r2
 8002adc:	095b      	lsrs	r3, r3, #5
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ae4:	441c      	add	r4, r3
 8002ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aea:	2200      	movs	r2, #0
 8002aec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002af0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002af4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002af8:	4642      	mov	r2, r8
 8002afa:	464b      	mov	r3, r9
 8002afc:	1891      	adds	r1, r2, r2
 8002afe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b00:	415b      	adcs	r3, r3
 8002b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b08:	4641      	mov	r1, r8
 8002b0a:	1851      	adds	r1, r2, r1
 8002b0c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b0e:	4649      	mov	r1, r9
 8002b10:	414b      	adcs	r3, r1
 8002b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b20:	4659      	mov	r1, fp
 8002b22:	00cb      	lsls	r3, r1, #3
 8002b24:	4651      	mov	r1, sl
 8002b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b2a:	4651      	mov	r1, sl
 8002b2c:	00ca      	lsls	r2, r1, #3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4619      	mov	r1, r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	4642      	mov	r2, r8
 8002b36:	189b      	adds	r3, r3, r2
 8002b38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b3c:	464b      	mov	r3, r9
 8002b3e:	460a      	mov	r2, r1
 8002b40:	eb42 0303 	adc.w	r3, r2, r3
 8002b44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	18db      	adds	r3, r3, r3
 8002b60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b62:	4613      	mov	r3, r2
 8002b64:	eb42 0303 	adc.w	r3, r2, r3
 8002b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b72:	f7fd fb29 	bl	80001c8 <__aeabi_uldivmod>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb0 <UART_SetConfig+0x2d4>)
 8002b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	2164      	movs	r1, #100	@ 0x64
 8002b84:	fb01 f303 	mul.w	r3, r1, r3
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	3332      	adds	r3, #50	@ 0x32
 8002b8e:	4a08      	ldr	r2, [pc, #32]	@ (8002bb0 <UART_SetConfig+0x2d4>)
 8002b90:	fba2 2303 	umull	r2, r3, r2, r3
 8002b94:	095b      	lsrs	r3, r3, #5
 8002b96:	f003 0207 	and.w	r2, r3, #7
 8002b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4422      	add	r2, r4
 8002ba2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ba4:	e106      	b.n	8002db4 <UART_SetConfig+0x4d8>
 8002ba6:	bf00      	nop
 8002ba8:	40011000 	.word	0x40011000
 8002bac:	40011400 	.word	0x40011400
 8002bb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002bbe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002bc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002bc6:	4642      	mov	r2, r8
 8002bc8:	464b      	mov	r3, r9
 8002bca:	1891      	adds	r1, r2, r2
 8002bcc:	6239      	str	r1, [r7, #32]
 8002bce:	415b      	adcs	r3, r3
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bd6:	4641      	mov	r1, r8
 8002bd8:	1854      	adds	r4, r2, r1
 8002bda:	4649      	mov	r1, r9
 8002bdc:	eb43 0501 	adc.w	r5, r3, r1
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	00eb      	lsls	r3, r5, #3
 8002bea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bee:	00e2      	lsls	r2, r4, #3
 8002bf0:	4614      	mov	r4, r2
 8002bf2:	461d      	mov	r5, r3
 8002bf4:	4643      	mov	r3, r8
 8002bf6:	18e3      	adds	r3, r4, r3
 8002bf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002bfc:	464b      	mov	r3, r9
 8002bfe:	eb45 0303 	adc.w	r3, r5, r3
 8002c02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c22:	4629      	mov	r1, r5
 8002c24:	008b      	lsls	r3, r1, #2
 8002c26:	4621      	mov	r1, r4
 8002c28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c2c:	4621      	mov	r1, r4
 8002c2e:	008a      	lsls	r2, r1, #2
 8002c30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002c34:	f7fd fac8 	bl	80001c8 <__aeabi_uldivmod>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4b60      	ldr	r3, [pc, #384]	@ (8002dc0 <UART_SetConfig+0x4e4>)
 8002c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	011c      	lsls	r4, r3, #4
 8002c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c58:	4642      	mov	r2, r8
 8002c5a:	464b      	mov	r3, r9
 8002c5c:	1891      	adds	r1, r2, r2
 8002c5e:	61b9      	str	r1, [r7, #24]
 8002c60:	415b      	adcs	r3, r3
 8002c62:	61fb      	str	r3, [r7, #28]
 8002c64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c68:	4641      	mov	r1, r8
 8002c6a:	1851      	adds	r1, r2, r1
 8002c6c:	6139      	str	r1, [r7, #16]
 8002c6e:	4649      	mov	r1, r9
 8002c70:	414b      	adcs	r3, r1
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c80:	4659      	mov	r1, fp
 8002c82:	00cb      	lsls	r3, r1, #3
 8002c84:	4651      	mov	r1, sl
 8002c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c8a:	4651      	mov	r1, sl
 8002c8c:	00ca      	lsls	r2, r1, #3
 8002c8e:	4610      	mov	r0, r2
 8002c90:	4619      	mov	r1, r3
 8002c92:	4603      	mov	r3, r0
 8002c94:	4642      	mov	r2, r8
 8002c96:	189b      	adds	r3, r3, r2
 8002c98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c9c:	464b      	mov	r3, r9
 8002c9e:	460a      	mov	r2, r1
 8002ca0:	eb42 0303 	adc.w	r3, r2, r3
 8002ca4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cb2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002cc0:	4649      	mov	r1, r9
 8002cc2:	008b      	lsls	r3, r1, #2
 8002cc4:	4641      	mov	r1, r8
 8002cc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cca:	4641      	mov	r1, r8
 8002ccc:	008a      	lsls	r2, r1, #2
 8002cce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002cd2:	f7fd fa79 	bl	80001c8 <__aeabi_uldivmod>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4611      	mov	r1, r2
 8002cdc:	4b38      	ldr	r3, [pc, #224]	@ (8002dc0 <UART_SetConfig+0x4e4>)
 8002cde:	fba3 2301 	umull	r2, r3, r3, r1
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2264      	movs	r2, #100	@ 0x64
 8002ce6:	fb02 f303 	mul.w	r3, r2, r3
 8002cea:	1acb      	subs	r3, r1, r3
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	3332      	adds	r3, #50	@ 0x32
 8002cf0:	4a33      	ldr	r2, [pc, #204]	@ (8002dc0 <UART_SetConfig+0x4e4>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cfc:	441c      	add	r4, r3
 8002cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d02:	2200      	movs	r2, #0
 8002d04:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d06:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d0c:	4642      	mov	r2, r8
 8002d0e:	464b      	mov	r3, r9
 8002d10:	1891      	adds	r1, r2, r2
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	415b      	adcs	r3, r3
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d1c:	4641      	mov	r1, r8
 8002d1e:	1851      	adds	r1, r2, r1
 8002d20:	6039      	str	r1, [r7, #0]
 8002d22:	4649      	mov	r1, r9
 8002d24:	414b      	adcs	r3, r1
 8002d26:	607b      	str	r3, [r7, #4]
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d34:	4659      	mov	r1, fp
 8002d36:	00cb      	lsls	r3, r1, #3
 8002d38:	4651      	mov	r1, sl
 8002d3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d3e:	4651      	mov	r1, sl
 8002d40:	00ca      	lsls	r2, r1, #3
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	4603      	mov	r3, r0
 8002d48:	4642      	mov	r2, r8
 8002d4a:	189b      	adds	r3, r3, r2
 8002d4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d4e:	464b      	mov	r3, r9
 8002d50:	460a      	mov	r2, r1
 8002d52:	eb42 0303 	adc.w	r3, r2, r3
 8002d56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d62:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d70:	4649      	mov	r1, r9
 8002d72:	008b      	lsls	r3, r1, #2
 8002d74:	4641      	mov	r1, r8
 8002d76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d7a:	4641      	mov	r1, r8
 8002d7c:	008a      	lsls	r2, r1, #2
 8002d7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d82:	f7fd fa21 	bl	80001c8 <__aeabi_uldivmod>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc0 <UART_SetConfig+0x4e4>)
 8002d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	2164      	movs	r1, #100	@ 0x64
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	3332      	adds	r3, #50	@ 0x32
 8002d9e:	4a08      	ldr	r2, [pc, #32]	@ (8002dc0 <UART_SetConfig+0x4e4>)
 8002da0:	fba2 2303 	umull	r2, r3, r2, r3
 8002da4:	095b      	lsrs	r3, r3, #5
 8002da6:	f003 020f 	and.w	r2, r3, #15
 8002daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4422      	add	r2, r4
 8002db2:	609a      	str	r2, [r3, #8]
}
 8002db4:	bf00      	nop
 8002db6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dc0:	51eb851f 	.word	0x51eb851f

08002dc4 <memset>:
 8002dc4:	4402      	add	r2, r0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d100      	bne.n	8002dce <memset+0xa>
 8002dcc:	4770      	bx	lr
 8002dce:	f803 1b01 	strb.w	r1, [r3], #1
 8002dd2:	e7f9      	b.n	8002dc8 <memset+0x4>

08002dd4 <__libc_init_array>:
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	4d0d      	ldr	r5, [pc, #52]	@ (8002e0c <__libc_init_array+0x38>)
 8002dd8:	4c0d      	ldr	r4, [pc, #52]	@ (8002e10 <__libc_init_array+0x3c>)
 8002dda:	1b64      	subs	r4, r4, r5
 8002ddc:	10a4      	asrs	r4, r4, #2
 8002dde:	2600      	movs	r6, #0
 8002de0:	42a6      	cmp	r6, r4
 8002de2:	d109      	bne.n	8002df8 <__libc_init_array+0x24>
 8002de4:	4d0b      	ldr	r5, [pc, #44]	@ (8002e14 <__libc_init_array+0x40>)
 8002de6:	4c0c      	ldr	r4, [pc, #48]	@ (8002e18 <__libc_init_array+0x44>)
 8002de8:	f000 f818 	bl	8002e1c <_init>
 8002dec:	1b64      	subs	r4, r4, r5
 8002dee:	10a4      	asrs	r4, r4, #2
 8002df0:	2600      	movs	r6, #0
 8002df2:	42a6      	cmp	r6, r4
 8002df4:	d105      	bne.n	8002e02 <__libc_init_array+0x2e>
 8002df6:	bd70      	pop	{r4, r5, r6, pc}
 8002df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dfc:	4798      	blx	r3
 8002dfe:	3601      	adds	r6, #1
 8002e00:	e7ee      	b.n	8002de0 <__libc_init_array+0xc>
 8002e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e06:	4798      	blx	r3
 8002e08:	3601      	adds	r6, #1
 8002e0a:	e7f2      	b.n	8002df2 <__libc_init_array+0x1e>
 8002e0c:	08002e54 	.word	0x08002e54
 8002e10:	08002e54 	.word	0x08002e54
 8002e14:	08002e54 	.word	0x08002e54
 8002e18:	08002e58 	.word	0x08002e58

08002e1c <_init>:
 8002e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1e:	bf00      	nop
 8002e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e22:	bc08      	pop	{r3}
 8002e24:	469e      	mov	lr, r3
 8002e26:	4770      	bx	lr

08002e28 <_fini>:
 8002e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2a:	bf00      	nop
 8002e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e2e:	bc08      	pop	{r3}
 8002e30:	469e      	mov	lr, r3
 8002e32:	4770      	bx	lr

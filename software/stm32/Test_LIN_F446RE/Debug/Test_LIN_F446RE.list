
Test_LIN_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032f4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080034b8  080034b8  000044b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034d0  080034d0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080034d0  080034d0  000044d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034d8  080034d8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034d8  080034d8  000044d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034dc  080034dc  000044dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080034e0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  080034ec  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080034ec  000050ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000982a  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac8  00000000  00000000  0000e866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  00010330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005f6  00000000  00000000  00010af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020541  00000000  00000000  000110ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a7df  00000000  00000000  0003162f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4d0e  00000000  00000000  0003be0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100b1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e9c  00000000  00000000  00100b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001029fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080034a0 	.word	0x080034a0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080034a0 	.word	0x080034a0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <pid_Calc>:
/* USER CODE BEGIN 0 */
uint8_t TxData[20];
int indx = 0;

uint8_t pid_Calc (uint8_t ID)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
	if (ID>0x3F) Error_Handler();
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	2b3f      	cmp	r3, #63	@ 0x3f
 8000502:	d901      	bls.n	8000508 <pid_Calc+0x14>
 8000504:	f000 fb50 	bl	8000ba8 <Error_Handler>
	uint8_t IDBuf[6];
	for (int i=0; i<6; i++)
 8000508:	2300      	movs	r3, #0
 800050a:	617b      	str	r3, [r7, #20]
 800050c:	e010      	b.n	8000530 <pid_Calc+0x3c>
	{
		IDBuf[i] = (ID>>i)&0x01;
 800050e:	79fa      	ldrb	r2, [r7, #7]
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	fa42 f303 	asr.w	r3, r2, r3
 8000516:	b2db      	uxtb	r3, r3
 8000518:	f003 0301 	and.w	r3, r3, #1
 800051c:	b2d9      	uxtb	r1, r3
 800051e:	f107 020c 	add.w	r2, r7, #12
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	4413      	add	r3, r2
 8000526:	460a      	mov	r2, r1
 8000528:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<6; i++)
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	3301      	adds	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	2b05      	cmp	r3, #5
 8000534:	ddeb      	ble.n	800050e <pid_Calc+0x1a>
	}

	uint8_t P0 = (IDBuf[0] ^ IDBuf[1] ^ IDBuf[2] ^ IDBuf[4])&0x01;
 8000536:	7b3a      	ldrb	r2, [r7, #12]
 8000538:	7b7b      	ldrb	r3, [r7, #13]
 800053a:	4053      	eors	r3, r2
 800053c:	b2da      	uxtb	r2, r3
 800053e:	7bbb      	ldrb	r3, [r7, #14]
 8000540:	4053      	eors	r3, r2
 8000542:	b2da      	uxtb	r2, r3
 8000544:	7c3b      	ldrb	r3, [r7, #16]
 8000546:	4053      	eors	r3, r2
 8000548:	b2db      	uxtb	r3, r3
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	74fb      	strb	r3, [r7, #19]
	uint8_t P1 = ~((IDBuf[1] ^ IDBuf[3] ^ IDBuf[4] ^ IDBuf[5])&0x01);
 8000550:	7b7a      	ldrb	r2, [r7, #13]
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	4053      	eors	r3, r2
 8000556:	b2da      	uxtb	r2, r3
 8000558:	7c3b      	ldrb	r3, [r7, #16]
 800055a:	4053      	eors	r3, r2
 800055c:	b2da      	uxtb	r2, r3
 800055e:	7c7b      	ldrb	r3, [r7, #17]
 8000560:	4053      	eors	r3, r2
 8000562:	b2db      	uxtb	r3, r3
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	b2db      	uxtb	r3, r3
 800056a:	43db      	mvns	r3, r3
 800056c:	74bb      	strb	r3, [r7, #18]

	ID = ID | (P0<<6) | (P1<<7);
 800056e:	7cfb      	ldrb	r3, [r7, #19]
 8000570:	019b      	lsls	r3, r3, #6
 8000572:	b25a      	sxtb	r2, r3
 8000574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000578:	4313      	orrs	r3, r2
 800057a:	b25a      	sxtb	r2, r3
 800057c:	7cbb      	ldrb	r3, [r7, #18]
 800057e:	01db      	lsls	r3, r3, #7
 8000580:	b25b      	sxtb	r3, r3
 8000582:	4313      	orrs	r3, r2
 8000584:	b25b      	sxtb	r3, r3
 8000586:	71fb      	strb	r3, [r7, #7]
	return ID;
 8000588:	79fb      	ldrb	r3, [r7, #7]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3718      	adds	r7, #24
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <checksum_Calc>:

uint8_t checksum_Calc (uint8_t PID, uint8_t *data, uint8_t size)
{
 8000592:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000596:	b089      	sub	sp, #36	@ 0x24
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	6039      	str	r1, [r7, #0]
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
 80005a4:	466b      	mov	r3, sp
 80005a6:	4618      	mov	r0, r3
	uint8_t buffer[size+2];
 80005a8:	79bb      	ldrb	r3, [r7, #6]
 80005aa:	1c99      	adds	r1, r3, #2
 80005ac:	1e4b      	subs	r3, r1, #1
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	460a      	mov	r2, r1
 80005b2:	2300      	movs	r3, #0
 80005b4:	4690      	mov	r8, r2
 80005b6:	4699      	mov	r9, r3
 80005b8:	f04f 0200 	mov.w	r2, #0
 80005bc:	f04f 0300 	mov.w	r3, #0
 80005c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80005c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80005c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80005cc:	460a      	mov	r2, r1
 80005ce:	2300      	movs	r3, #0
 80005d0:	4614      	mov	r4, r2
 80005d2:	461d      	mov	r5, r3
 80005d4:	f04f 0200 	mov.w	r2, #0
 80005d8:	f04f 0300 	mov.w	r3, #0
 80005dc:	00eb      	lsls	r3, r5, #3
 80005de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80005e2:	00e2      	lsls	r2, r4, #3
 80005e4:	460b      	mov	r3, r1
 80005e6:	3307      	adds	r3, #7
 80005e8:	08db      	lsrs	r3, r3, #3
 80005ea:	00db      	lsls	r3, r3, #3
 80005ec:	ebad 0d03 	sub.w	sp, sp, r3
 80005f0:	466b      	mov	r3, sp
 80005f2:	3300      	adds	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
	uint16_t sum=0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	83fb      	strh	r3, [r7, #30]
	buffer[0] = PID;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	79fa      	ldrb	r2, [r7, #7]
 80005fe:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<size; i++)
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
 8000604:	e00a      	b.n	800061c <checksum_Calc+0x8a>
	{
		buffer[i+1] = data[i];
 8000606:	69bb      	ldr	r3, [r7, #24]
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	441a      	add	r2, r3
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	3301      	adds	r3, #1
 8000610:	7811      	ldrb	r1, [r2, #0]
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	54d1      	strb	r1, [r2, r3]
	for (int i=0; i<size; i++)
 8000616:	69bb      	ldr	r3, [r7, #24]
 8000618:	3301      	adds	r3, #1
 800061a:	61bb      	str	r3, [r7, #24]
 800061c:	79bb      	ldrb	r3, [r7, #6]
 800061e:	69ba      	ldr	r2, [r7, #24]
 8000620:	429a      	cmp	r2, r3
 8000622:	dbf0      	blt.n	8000606 <checksum_Calc+0x74>
	}

	for (int i=0; i<size+1; i++)
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	e010      	b.n	800064c <checksum_Calc+0xba>
	{
		sum = sum + buffer[i];
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	4413      	add	r3, r2
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	461a      	mov	r2, r3
 8000634:	8bfb      	ldrh	r3, [r7, #30]
 8000636:	4413      	add	r3, r2
 8000638:	83fb      	strh	r3, [r7, #30]
		if (sum>0xff) sum = sum-0xff;
 800063a:	8bfb      	ldrh	r3, [r7, #30]
 800063c:	2bff      	cmp	r3, #255	@ 0xff
 800063e:	d902      	bls.n	8000646 <checksum_Calc+0xb4>
 8000640:	8bfb      	ldrh	r3, [r7, #30]
 8000642:	3bff      	subs	r3, #255	@ 0xff
 8000644:	83fb      	strh	r3, [r7, #30]
	for (int i=0; i<size+1; i++)
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	3301      	adds	r3, #1
 800064a:	617b      	str	r3, [r7, #20]
 800064c:	79bb      	ldrb	r3, [r7, #6]
 800064e:	697a      	ldr	r2, [r7, #20]
 8000650:	429a      	cmp	r2, r3
 8000652:	ddea      	ble.n	800062a <checksum_Calc+0x98>
	}

	sum = 0xff-sum;
 8000654:	8bfb      	ldrh	r3, [r7, #30]
 8000656:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800065a:	83fb      	strh	r3, [r7, #30]
	return sum;
 800065c:	8bfb      	ldrh	r3, [r7, #30]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	4685      	mov	sp, r0
}
 8000662:	4618      	mov	r0, r3
 8000664:	3724      	adds	r7, #36	@ 0x24
 8000666:	46bd      	mov	sp, r7
 8000668:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800066c:	4770      	bx	lr
	...

08000670 <HAL_GPIO_EXTI_Callback>:
int B1=0, B2=0, B3=0, B4=0, B5=0, transmit=0;
uint8_t RxData[10];
uint16_t ADC_DATA;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d116      	bne.n	80006ae <HAL_GPIO_EXTI_Callback+0x3e>
	{
		B1 = transmit = 1;
 8000680:	4b42      	ldr	r3, [pc, #264]	@ (800078c <HAL_GPIO_EXTI_Callback+0x11c>)
 8000682:	2201      	movs	r2, #1
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	4b41      	ldr	r3, [pc, #260]	@ (800078c <HAL_GPIO_EXTI_Callback+0x11c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a41      	ldr	r2, [pc, #260]	@ (8000790 <HAL_GPIO_EXTI_Callback+0x120>)
 800068c:	6013      	str	r3, [r2, #0]
		B2 = B3 = B4 = B5 = 0;
 800068e:	4b41      	ldr	r3, [pc, #260]	@ (8000794 <HAL_GPIO_EXTI_Callback+0x124>)
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	4b3f      	ldr	r3, [pc, #252]	@ (8000794 <HAL_GPIO_EXTI_Callback+0x124>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a3f      	ldr	r2, [pc, #252]	@ (8000798 <HAL_GPIO_EXTI_Callback+0x128>)
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b3e      	ldr	r3, [pc, #248]	@ (8000798 <HAL_GPIO_EXTI_Callback+0x128>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a3e      	ldr	r2, [pc, #248]	@ (800079c <HAL_GPIO_EXTI_Callback+0x12c>)
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b3d      	ldr	r3, [pc, #244]	@ (800079c <HAL_GPIO_EXTI_Callback+0x12c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a3d      	ldr	r2, [pc, #244]	@ (80007a0 <HAL_GPIO_EXTI_Callback+0x130>)
 80006aa:	6013      	str	r3, [r2, #0]
	else if (GPIO_Pin == GPIO_PIN_13)
	{
		B5 = transmit = 1;
		B1 = B3 = B2 = B4 = 0;
	}
}
 80006ac:	e067      	b.n	800077e <HAL_GPIO_EXTI_Callback+0x10e>
	else if (GPIO_Pin == GPIO_PIN_1)
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d116      	bne.n	80006e2 <HAL_GPIO_EXTI_Callback+0x72>
		B2 = transmit = 1;
 80006b4:	4b35      	ldr	r3, [pc, #212]	@ (800078c <HAL_GPIO_EXTI_Callback+0x11c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	4b34      	ldr	r3, [pc, #208]	@ (800078c <HAL_GPIO_EXTI_Callback+0x11c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a38      	ldr	r2, [pc, #224]	@ (80007a0 <HAL_GPIO_EXTI_Callback+0x130>)
 80006c0:	6013      	str	r3, [r2, #0]
		B1 = B3 = B4 = B5 = 0;
 80006c2:	4b34      	ldr	r3, [pc, #208]	@ (8000794 <HAL_GPIO_EXTI_Callback+0x124>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	4b32      	ldr	r3, [pc, #200]	@ (8000794 <HAL_GPIO_EXTI_Callback+0x124>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a32      	ldr	r2, [pc, #200]	@ (8000798 <HAL_GPIO_EXTI_Callback+0x128>)
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b31      	ldr	r3, [pc, #196]	@ (8000798 <HAL_GPIO_EXTI_Callback+0x128>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a31      	ldr	r2, [pc, #196]	@ (800079c <HAL_GPIO_EXTI_Callback+0x12c>)
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b30      	ldr	r3, [pc, #192]	@ (800079c <HAL_GPIO_EXTI_Callback+0x12c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a2c      	ldr	r2, [pc, #176]	@ (8000790 <HAL_GPIO_EXTI_Callback+0x120>)
 80006de:	6013      	str	r3, [r2, #0]
}
 80006e0:	e04d      	b.n	800077e <HAL_GPIO_EXTI_Callback+0x10e>
	else if (GPIO_Pin == GPIO_PIN_4)
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	2b10      	cmp	r3, #16
 80006e6:	d116      	bne.n	8000716 <HAL_GPIO_EXTI_Callback+0xa6>
		B3 = transmit = 1;
 80006e8:	4b28      	ldr	r3, [pc, #160]	@ (800078c <HAL_GPIO_EXTI_Callback+0x11c>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	4b27      	ldr	r3, [pc, #156]	@ (800078c <HAL_GPIO_EXTI_Callback+0x11c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a2a      	ldr	r2, [pc, #168]	@ (800079c <HAL_GPIO_EXTI_Callback+0x12c>)
 80006f4:	6013      	str	r3, [r2, #0]
		B1 = B2 = B4 = B5 = 0;
 80006f6:	4b27      	ldr	r3, [pc, #156]	@ (8000794 <HAL_GPIO_EXTI_Callback+0x124>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	4b25      	ldr	r3, [pc, #148]	@ (8000794 <HAL_GPIO_EXTI_Callback+0x124>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a25      	ldr	r2, [pc, #148]	@ (8000798 <HAL_GPIO_EXTI_Callback+0x128>)
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <HAL_GPIO_EXTI_Callback+0x128>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a25      	ldr	r2, [pc, #148]	@ (80007a0 <HAL_GPIO_EXTI_Callback+0x130>)
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b24      	ldr	r3, [pc, #144]	@ (80007a0 <HAL_GPIO_EXTI_Callback+0x130>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <HAL_GPIO_EXTI_Callback+0x120>)
 8000712:	6013      	str	r3, [r2, #0]
}
 8000714:	e033      	b.n	800077e <HAL_GPIO_EXTI_Callback+0x10e>
	else if (GPIO_Pin == GPIO_PIN_2)
 8000716:	88fb      	ldrh	r3, [r7, #6]
 8000718:	2b04      	cmp	r3, #4
 800071a:	d116      	bne.n	800074a <HAL_GPIO_EXTI_Callback+0xda>
		B4 = transmit = 1;
 800071c:	4b1b      	ldr	r3, [pc, #108]	@ (800078c <HAL_GPIO_EXTI_Callback+0x11c>)
 800071e:	2201      	movs	r2, #1
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <HAL_GPIO_EXTI_Callback+0x11c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a1c      	ldr	r2, [pc, #112]	@ (8000798 <HAL_GPIO_EXTI_Callback+0x128>)
 8000728:	6013      	str	r3, [r2, #0]
		B1 = B3 = B2 = B5 = 0;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <HAL_GPIO_EXTI_Callback+0x124>)
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <HAL_GPIO_EXTI_Callback+0x124>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a1a      	ldr	r2, [pc, #104]	@ (80007a0 <HAL_GPIO_EXTI_Callback+0x130>)
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <HAL_GPIO_EXTI_Callback+0x130>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a17      	ldr	r2, [pc, #92]	@ (800079c <HAL_GPIO_EXTI_Callback+0x12c>)
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b16      	ldr	r3, [pc, #88]	@ (800079c <HAL_GPIO_EXTI_Callback+0x12c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a12      	ldr	r2, [pc, #72]	@ (8000790 <HAL_GPIO_EXTI_Callback+0x120>)
 8000746:	6013      	str	r3, [r2, #0]
}
 8000748:	e019      	b.n	800077e <HAL_GPIO_EXTI_Callback+0x10e>
	else if (GPIO_Pin == GPIO_PIN_13)
 800074a:	88fb      	ldrh	r3, [r7, #6]
 800074c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000750:	d115      	bne.n	800077e <HAL_GPIO_EXTI_Callback+0x10e>
		B5 = transmit = 1;
 8000752:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <HAL_GPIO_EXTI_Callback+0x11c>)
 8000754:	2201      	movs	r2, #1
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <HAL_GPIO_EXTI_Callback+0x11c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a0d      	ldr	r2, [pc, #52]	@ (8000794 <HAL_GPIO_EXTI_Callback+0x124>)
 800075e:	6013      	str	r3, [r2, #0]
		B1 = B3 = B2 = B4 = 0;
 8000760:	4b0d      	ldr	r3, [pc, #52]	@ (8000798 <HAL_GPIO_EXTI_Callback+0x128>)
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <HAL_GPIO_EXTI_Callback+0x128>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a0d      	ldr	r2, [pc, #52]	@ (80007a0 <HAL_GPIO_EXTI_Callback+0x130>)
 800076c:	6013      	str	r3, [r2, #0]
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <HAL_GPIO_EXTI_Callback+0x130>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a0a      	ldr	r2, [pc, #40]	@ (800079c <HAL_GPIO_EXTI_Callback+0x12c>)
 8000774:	6013      	str	r3, [r2, #0]
 8000776:	4b09      	ldr	r3, [pc, #36]	@ (800079c <HAL_GPIO_EXTI_Callback+0x12c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a05      	ldr	r2, [pc, #20]	@ (8000790 <HAL_GPIO_EXTI_Callback+0x120>)
 800077c:	6013      	str	r3, [r2, #0]
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20000098 	.word	0x20000098
 8000790:	20000084 	.word	0x20000084
 8000794:	20000094 	.word	0x20000094
 8000798:	20000090 	.word	0x20000090
 800079c:	2000008c 	.word	0x2000008c
 80007a0:	20000088 	.word	0x20000088

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007aa:	f000 fb27 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ae:	f000 f899 	bl	80008e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b2:	f000 f933 	bl	8000a1c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007b6:	f000 f907 	bl	80009c8 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (transmit == 1)
 80007ba:	4b3d      	ldr	r3, [pc, #244]	@ (80008b0 <main+0x10c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d1fb      	bne.n	80007ba <main+0x16>
	  {
		  HAL_Delay(300);  // debouncing
 80007c2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80007c6:	f000 fb8b 	bl	8000ee0 <HAL_Delay>
		  TxData[0] = 0x55;  // sync field
 80007ca:	4b3a      	ldr	r3, [pc, #232]	@ (80008b4 <main+0x110>)
 80007cc:	2255      	movs	r2, #85	@ 0x55
 80007ce:	701a      	strb	r2, [r3, #0]
		  TxData[1] = pid_Calc(0x34);
 80007d0:	2034      	movs	r0, #52	@ 0x34
 80007d2:	f7ff fe8f 	bl	80004f4 <pid_Calc>
 80007d6:	4603      	mov	r3, r0
 80007d8:	461a      	mov	r2, r3
 80007da:	4b36      	ldr	r3, [pc, #216]	@ (80008b4 <main+0x110>)
 80007dc:	705a      	strb	r2, [r3, #1]
		  TxData[2] = (B1<<0) | (B2<<1) | (B3<<2) | (B4<<3) | (B5<<4);
 80007de:	4b36      	ldr	r3, [pc, #216]	@ (80008b8 <main+0x114>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	b25a      	sxtb	r2, r3
 80007e6:	4b35      	ldr	r3, [pc, #212]	@ (80008bc <main+0x118>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	b25b      	sxtb	r3, r3
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b25a      	sxtb	r2, r3
 80007f0:	4b33      	ldr	r3, [pc, #204]	@ (80008c0 <main+0x11c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	b25b      	sxtb	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	b25a      	sxtb	r2, r3
 80007fc:	4b31      	ldr	r3, [pc, #196]	@ (80008c4 <main+0x120>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	b25b      	sxtb	r3, r3
 8000804:	4313      	orrs	r3, r2
 8000806:	b25a      	sxtb	r2, r3
 8000808:	4b2f      	ldr	r3, [pc, #188]	@ (80008c8 <main+0x124>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	011b      	lsls	r3, r3, #4
 800080e:	b25b      	sxtb	r3, r3
 8000810:	4313      	orrs	r3, r2
 8000812:	b25b      	sxtb	r3, r3
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b27      	ldr	r3, [pc, #156]	@ (80008b4 <main+0x110>)
 8000818:	709a      	strb	r2, [r3, #2]
		  TxData[3] = checksum_Calc(TxData[1], TxData+2, 1);   //lin 2.1 includes PID, for line v1 use PID =0
 800081a:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <main+0x110>)
 800081c:	785b      	ldrb	r3, [r3, #1]
 800081e:	492b      	ldr	r1, [pc, #172]	@ (80008cc <main+0x128>)
 8000820:	2201      	movs	r2, #1
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff feb5 	bl	8000592 <checksum_Calc>
 8000828:	4603      	mov	r3, r0
 800082a:	461a      	mov	r2, r3
 800082c:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <main+0x110>)
 800082e:	70da      	strb	r2, [r3, #3]

		  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);  // enable transmitter
 8000830:	2201      	movs	r2, #1
 8000832:	2180      	movs	r1, #128	@ 0x80
 8000834:	4826      	ldr	r0, [pc, #152]	@ (80008d0 <main+0x12c>)
 8000836:	f000 feaf 	bl	8001598 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 800083a:	2064      	movs	r0, #100	@ 0x64
 800083c:	f000 fb50 	bl	8000ee0 <HAL_Delay>
		  HAL_LIN_SendBreak(&huart1);
 8000840:	4824      	ldr	r0, [pc, #144]	@ (80008d4 <main+0x130>)
 8000842:	f002 f95b 	bl	8002afc <HAL_LIN_SendBreak>
		  HAL_UART_Transmit(&huart1, TxData, 4, 1000);
 8000846:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800084a:	2204      	movs	r2, #4
 800084c:	4919      	ldr	r1, [pc, #100]	@ (80008b4 <main+0x110>)
 800084e:	4821      	ldr	r0, [pc, #132]	@ (80008d4 <main+0x130>)
 8000850:	f001 fd75 	bl	800233e <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);  // disable transmitter
 8000854:	2200      	movs	r2, #0
 8000856:	2180      	movs	r1, #128	@ 0x80
 8000858:	481d      	ldr	r0, [pc, #116]	@ (80008d0 <main+0x12c>)
 800085a:	f000 fe9d 	bl	8001598 <HAL_GPIO_WritePin>

		  transmit = 0;
 800085e:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <main+0x10c>)
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]

		  if (HAL_UART_Receive(&huart1, RxData, 7, 500) == HAL_OK)
 8000864:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000868:	2207      	movs	r2, #7
 800086a:	491b      	ldr	r1, [pc, #108]	@ (80008d8 <main+0x134>)
 800086c:	4819      	ldr	r0, [pc, #100]	@ (80008d4 <main+0x130>)
 800086e:	f001 fdf1 	bl	8002454 <HAL_UART_Receive>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d1a0      	bne.n	80007ba <main+0x16>
		  {
			  uint8_t checksum = checksum_Calc(RxData[3], RxData+4, 2);
 8000878:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <main+0x134>)
 800087a:	78db      	ldrb	r3, [r3, #3]
 800087c:	4917      	ldr	r1, [pc, #92]	@ (80008dc <main+0x138>)
 800087e:	2202      	movs	r2, #2
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fe86 	bl	8000592 <checksum_Calc>
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
			  if (checksum == RxData[6])
 800088a:	4b13      	ldr	r3, [pc, #76]	@ (80008d8 <main+0x134>)
 800088c:	799b      	ldrb	r3, [r3, #6]
 800088e:	79fa      	ldrb	r2, [r7, #7]
 8000890:	429a      	cmp	r2, r3
 8000892:	d192      	bne.n	80007ba <main+0x16>
			  {
				  ADC_DATA = (RxData[5]<<8) | RxData[4];
 8000894:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <main+0x134>)
 8000896:	795b      	ldrb	r3, [r3, #5]
 8000898:	021b      	lsls	r3, r3, #8
 800089a:	b21a      	sxth	r2, r3
 800089c:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <main+0x134>)
 800089e:	791b      	ldrb	r3, [r3, #4]
 80008a0:	b21b      	sxth	r3, r3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b21b      	sxth	r3, r3
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	4b0d      	ldr	r3, [pc, #52]	@ (80008e0 <main+0x13c>)
 80008aa:	801a      	strh	r2, [r3, #0]
	  if (transmit == 1)
 80008ac:	e785      	b.n	80007ba <main+0x16>
 80008ae:	bf00      	nop
 80008b0:	20000098 	.word	0x20000098
 80008b4:	20000070 	.word	0x20000070
 80008b8:	20000088 	.word	0x20000088
 80008bc:	20000084 	.word	0x20000084
 80008c0:	2000008c 	.word	0x2000008c
 80008c4:	20000090 	.word	0x20000090
 80008c8:	20000094 	.word	0x20000094
 80008cc:	20000072 	.word	0x20000072
 80008d0:	40020800 	.word	0x40020800
 80008d4:	20000028 	.word	0x20000028
 80008d8:	2000009c 	.word	0x2000009c
 80008dc:	200000a0 	.word	0x200000a0
 80008e0:	200000a6 	.word	0x200000a6

080008e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b094      	sub	sp, #80	@ 0x50
 80008e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2234      	movs	r2, #52	@ 0x34
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 fda8 	bl	8003448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000908:	2300      	movs	r3, #0
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	4b2c      	ldr	r3, [pc, #176]	@ (80009c0 <SystemClock_Config+0xdc>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000910:	4a2b      	ldr	r2, [pc, #172]	@ (80009c0 <SystemClock_Config+0xdc>)
 8000912:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000916:	6413      	str	r3, [r2, #64]	@ 0x40
 8000918:	4b29      	ldr	r3, [pc, #164]	@ (80009c0 <SystemClock_Config+0xdc>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000924:	2300      	movs	r3, #0
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	4b26      	ldr	r3, [pc, #152]	@ (80009c4 <SystemClock_Config+0xe0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a25      	ldr	r2, [pc, #148]	@ (80009c4 <SystemClock_Config+0xe0>)
 800092e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	4b23      	ldr	r3, [pc, #140]	@ (80009c4 <SystemClock_Config+0xe0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000940:	2301      	movs	r3, #1
 8000942:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000944:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000948:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094a:	2302      	movs	r3, #2
 800094c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000952:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000954:	2304      	movs	r3, #4
 8000956:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000958:	23b4      	movs	r3, #180	@ 0xb4
 800095a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800095c:	2302      	movs	r3, #2
 800095e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000960:	2302      	movs	r3, #2
 8000962:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000964:	2302      	movs	r3, #2
 8000966:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4618      	mov	r0, r3
 800096e:	f001 f9df 	bl	8001d30 <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000978:	f000 f916 	bl	8000ba8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800097c:	f000 fe3e 	bl	80015fc <HAL_PWREx_EnableOverDrive>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000986:	f000 f90f 	bl	8000ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098a:	230f      	movs	r3, #15
 800098c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098e:	2302      	movs	r3, #2
 8000990:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000996:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800099a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800099c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	2105      	movs	r1, #5
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 fe77 	bl	800169c <HAL_RCC_ClockConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80009b4:	f000 f8f8 	bl	8000ba8 <Error_Handler>
  }
}
 80009b8:	bf00      	nop
 80009ba:	3750      	adds	r7, #80	@ 0x50
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40007000 	.word	0x40007000

080009c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009cc:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	@ (8000a18 <MX_USART1_UART_Init+0x50>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009d2:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009d4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80009d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  if (HAL_LIN_Init(&huart1, UART_LINBREAKDETECTLENGTH_11B) != HAL_OK)
 80009fe:	2120      	movs	r1, #32
 8000a00:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <MX_USART1_UART_Init+0x4c>)
 8000a02:	f001 fc33 	bl	800226c <HAL_LIN_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000a0c:	f000 f8cc 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000028 	.word	0x20000028
 8000a18:	40011000 	.word	0x40011000

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	@ 0x28
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b59      	ldr	r3, [pc, #356]	@ (8000b9c <MX_GPIO_Init+0x180>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	4a58      	ldr	r2, [pc, #352]	@ (8000b9c <MX_GPIO_Init+0x180>)
 8000a3c:	f043 0304 	orr.w	r3, r3, #4
 8000a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a42:	4b56      	ldr	r3, [pc, #344]	@ (8000b9c <MX_GPIO_Init+0x180>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	f003 0304 	and.w	r3, r3, #4
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b52      	ldr	r3, [pc, #328]	@ (8000b9c <MX_GPIO_Init+0x180>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a51      	ldr	r2, [pc, #324]	@ (8000b9c <MX_GPIO_Init+0x180>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b4f      	ldr	r3, [pc, #316]	@ (8000b9c <MX_GPIO_Init+0x180>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	4b4b      	ldr	r3, [pc, #300]	@ (8000b9c <MX_GPIO_Init+0x180>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a4a      	ldr	r2, [pc, #296]	@ (8000b9c <MX_GPIO_Init+0x180>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b48      	ldr	r3, [pc, #288]	@ (8000b9c <MX_GPIO_Init+0x180>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b44      	ldr	r3, [pc, #272]	@ (8000b9c <MX_GPIO_Init+0x180>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a43      	ldr	r2, [pc, #268]	@ (8000b9c <MX_GPIO_Init+0x180>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b41      	ldr	r3, [pc, #260]	@ (8000b9c <MX_GPIO_Init+0x180>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2120      	movs	r1, #32
 8000aa6:	483e      	ldr	r0, [pc, #248]	@ (8000ba0 <MX_GPIO_Init+0x184>)
 8000aa8:	f000 fd76 	bl	8001598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2180      	movs	r1, #128	@ 0x80
 8000ab0:	483c      	ldr	r0, [pc, #240]	@ (8000ba4 <MX_GPIO_Init+0x188>)
 8000ab2:	f000 fd71 	bl	8001598 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2;
 8000ab6:	f242 0304 	movw	r3, #8196	@ 0x2004
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000abc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4835      	ldr	r0, [pc, #212]	@ (8000ba4 <MX_GPIO_Init+0x188>)
 8000ace:	f000 fbcf 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000ad2:	2313      	movs	r3, #19
 8000ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	482e      	ldr	r0, [pc, #184]	@ (8000ba0 <MX_GPIO_Init+0x184>)
 8000ae8:	f000 fbc2 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aec:	230c      	movs	r3, #12
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afc:	2307      	movs	r3, #7
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	4826      	ldr	r0, [pc, #152]	@ (8000ba0 <MX_GPIO_Init+0x184>)
 8000b08:	f000 fbb2 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b0c:	2320      	movs	r3, #32
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	481f      	ldr	r0, [pc, #124]	@ (8000ba0 <MX_GPIO_Init+0x184>)
 8000b24:	f000 fba4 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000b28:	2380      	movs	r3, #128	@ 0x80
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4819      	ldr	r0, [pc, #100]	@ (8000ba4 <MX_GPIO_Init+0x188>)
 8000b40:	f000 fb96 	bl	8001270 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2100      	movs	r1, #0
 8000b48:	2006      	movs	r0, #6
 8000b4a:	f000 fac8 	bl	80010de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b4e:	2006      	movs	r0, #6
 8000b50:	f000 fae1 	bl	8001116 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	2007      	movs	r0, #7
 8000b5a:	f000 fac0 	bl	80010de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b5e:	2007      	movs	r0, #7
 8000b60:	f000 fad9 	bl	8001116 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2100      	movs	r1, #0
 8000b68:	2008      	movs	r0, #8
 8000b6a:	f000 fab8 	bl	80010de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b6e:	2008      	movs	r0, #8
 8000b70:	f000 fad1 	bl	8001116 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2100      	movs	r1, #0
 8000b78:	200a      	movs	r0, #10
 8000b7a:	f000 fab0 	bl	80010de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000b7e:	200a      	movs	r0, #10
 8000b80:	f000 fac9 	bl	8001116 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	2028      	movs	r0, #40	@ 0x28
 8000b8a:	f000 faa8 	bl	80010de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b8e:	2028      	movs	r0, #40	@ 0x28
 8000b90:	f000 fac1 	bl	8001116 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	@ 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000
 8000ba4:	40020800 	.word	0x40020800

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bac:	b672      	cpsid	i
}
 8000bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <Error_Handler+0x8>

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c00 <HAL_MspInit+0x4c>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bca:	4b0d      	ldr	r3, [pc, #52]	@ (8000c00 <HAL_MspInit+0x4c>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bde:	4a08      	ldr	r2, [pc, #32]	@ (8000c00 <HAL_MspInit+0x4c>)
 8000be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_MspInit+0x4c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bf2:	2007      	movs	r0, #7
 8000bf4:	f000 fa68 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40023800 	.word	0x40023800

08000c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	@ 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a26      	ldr	r2, [pc, #152]	@ (8000cbc <HAL_UART_MspInit+0xb8>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d145      	bne.n	8000cb2 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b25      	ldr	r3, [pc, #148]	@ (8000cc0 <HAL_UART_MspInit+0xbc>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2e:	4a24      	ldr	r2, [pc, #144]	@ (8000cc0 <HAL_UART_MspInit+0xbc>)
 8000c30:	f043 0310 	orr.w	r3, r3, #16
 8000c34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c36:	4b22      	ldr	r3, [pc, #136]	@ (8000cc0 <HAL_UART_MspInit+0xbc>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3a:	f003 0310 	and.w	r3, r3, #16
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc0 <HAL_UART_MspInit+0xbc>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000cc0 <HAL_UART_MspInit+0xbc>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c52:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc0 <HAL_UART_MspInit+0xbc>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c70:	2307      	movs	r3, #7
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4812      	ldr	r0, [pc, #72]	@ (8000cc4 <HAL_UART_MspInit+0xc0>)
 8000c7c:	f000 faf8 	bl	8001270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c92:	2307      	movs	r3, #7
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4809      	ldr	r0, [pc, #36]	@ (8000cc4 <HAL_UART_MspInit+0xc0>)
 8000c9e:	f000 fae7 	bl	8001270 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2025      	movs	r0, #37	@ 0x25
 8000ca8:	f000 fa19 	bl	80010de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cac:	2025      	movs	r0, #37	@ 0x25
 8000cae:	f000 fa32 	bl	8001116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cb2:	bf00      	nop
 8000cb4:	3728      	adds	r7, #40	@ 0x28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40011000 	.word	0x40011000
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40020000 	.word	0x40020000

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <NMI_Handler+0x4>

08000cd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <MemManage_Handler+0x4>

08000ce0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <UsageFault_Handler+0x4>

08000cf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1e:	f000 f8bf 	bl	8000ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f000 fc4e 	bl	80015cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000d38:	2002      	movs	r0, #2
 8000d3a:	f000 fc47 	bl	80015cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000d46:	2004      	movs	r0, #4
 8000d48:	f000 fc40 	bl	80015cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000d54:	2010      	movs	r0, #16
 8000d56:	f000 fc39 	bl	80015cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d64:	4802      	ldr	r0, [pc, #8]	@ (8000d70 <USART1_IRQHandler+0x10>)
 8000d66:	f001 fc0d 	bl	8002584 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000028 	.word	0x20000028

08000d74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d78:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d7c:	f000 fc26 	bl	80015cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d88:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <SystemInit+0x20>)
 8000d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d8e:	4a05      	ldr	r2, [pc, #20]	@ (8000da4 <SystemInit+0x20>)
 8000d90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000da8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000de0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dac:	f7ff ffea 	bl	8000d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db0:	480c      	ldr	r0, [pc, #48]	@ (8000de4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000db2:	490d      	ldr	r1, [pc, #52]	@ (8000de8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db4:	4a0d      	ldr	r2, [pc, #52]	@ (8000dec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000df0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000df4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f002 fb3f 	bl	8003458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dda:	f7ff fce3 	bl	80007a4 <main>
  bx  lr    
 8000dde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dec:	080034e0 	.word	0x080034e0
  ldr r2, =_sbss
 8000df0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000df4:	200000ac 	.word	0x200000ac

08000df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC_IRQHandler>
	...

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e00:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0d      	ldr	r2, [pc, #52]	@ (8000e3c <HAL_Init+0x40>)
 8000e06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e3c <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0a      	ldr	r2, [pc, #40]	@ (8000e3c <HAL_Init+0x40>)
 8000e12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	@ (8000e3c <HAL_Init+0x40>)
 8000e1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 f94f 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 f808 	bl	8000e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff fec0 	bl	8000bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023c00 	.word	0x40023c00

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e48:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <HAL_InitTick+0x54>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_InitTick+0x58>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f967 	bl	8001132 <HAL_SYSTICK_Config>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00e      	b.n	8000e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b0f      	cmp	r3, #15
 8000e72:	d80a      	bhi.n	8000e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e74:	2200      	movs	r2, #0
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f000 f92f 	bl	80010de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e80:	4a06      	ldr	r2, [pc, #24]	@ (8000e9c <HAL_InitTick+0x5c>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	e000      	b.n	8000e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000000 	.word	0x20000000
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000004 	.word	0x20000004

08000ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <HAL_IncTick+0x20>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_IncTick+0x24>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a04      	ldr	r2, [pc, #16]	@ (8000ec4 <HAL_IncTick+0x24>)
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	200000a8 	.word	0x200000a8

08000ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	@ (8000edc <HAL_GetTick+0x14>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	200000a8 	.word	0x200000a8

08000ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee8:	f7ff ffee 	bl	8000ec8 <HAL_GetTick>
 8000eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef8:	d005      	beq.n	8000f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efa:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <HAL_Delay+0x44>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f06:	bf00      	nop
 8000f08:	f7ff ffde 	bl	8000ec8 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d8f7      	bhi.n	8000f08 <HAL_Delay+0x28>
  {
  }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000008 	.word	0x20000008

08000f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f38:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f44:	4013      	ands	r3, r2
 8000f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5a:	4a04      	ldr	r2, [pc, #16]	@ (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	60d3      	str	r3, [r2, #12]
}
 8000f60:	bf00      	nop
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f74:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <__NVIC_GetPriorityGrouping+0x18>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	f003 0307 	and.w	r3, r3, #7
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	db0b      	blt.n	8000fb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f003 021f 	and.w	r2, r3, #31
 8000fa4:	4907      	ldr	r1, [pc, #28]	@ (8000fc4 <__NVIC_EnableIRQ+0x38>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	2001      	movs	r0, #1
 8000fae:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000e100 	.word	0xe000e100

08000fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	db0a      	blt.n	8000ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	490c      	ldr	r1, [pc, #48]	@ (8001014 <__NVIC_SetPriority+0x4c>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	0112      	lsls	r2, r2, #4
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff0:	e00a      	b.n	8001008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4908      	ldr	r1, [pc, #32]	@ (8001018 <__NVIC_SetPriority+0x50>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	3b04      	subs	r3, #4
 8001000:	0112      	lsls	r2, r2, #4
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	440b      	add	r3, r1
 8001006:	761a      	strb	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000e100 	.word	0xe000e100
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	@ 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f1c3 0307 	rsb	r3, r3, #7
 8001036:	2b04      	cmp	r3, #4
 8001038:	bf28      	it	cs
 800103a:	2304      	movcs	r3, #4
 800103c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3304      	adds	r3, #4
 8001042:	2b06      	cmp	r3, #6
 8001044:	d902      	bls.n	800104c <NVIC_EncodePriority+0x30>
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3b03      	subs	r3, #3
 800104a:	e000      	b.n	800104e <NVIC_EncodePriority+0x32>
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	f04f 32ff 	mov.w	r2, #4294967295
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43da      	mvns	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001064:	f04f 31ff 	mov.w	r1, #4294967295
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	43d9      	mvns	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	4313      	orrs	r3, r2
         );
}
 8001076:	4618      	mov	r0, r3
 8001078:	3724      	adds	r7, #36	@ 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001094:	d301      	bcc.n	800109a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001096:	2301      	movs	r3, #1
 8001098:	e00f      	b.n	80010ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109a:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <SysTick_Config+0x40>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a2:	210f      	movs	r1, #15
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f7ff ff8e 	bl	8000fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <SysTick_Config+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <SysTick_Config+0x40>)
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff29 	bl	8000f28 <__NVIC_SetPriorityGrouping>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f0:	f7ff ff3e 	bl	8000f70 <__NVIC_GetPriorityGrouping>
 80010f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	6978      	ldr	r0, [r7, #20]
 80010fc:	f7ff ff8e 	bl	800101c <NVIC_EncodePriority>
 8001100:	4602      	mov	r2, r0
 8001102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff5d 	bl	8000fc8 <__NVIC_SetPriority>
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff31 	bl	8000f8c <__NVIC_EnableIRQ>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffa2 	bl	8001084 <SysTick_Config>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001156:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff feb6 	bl	8000ec8 <HAL_GetTick>
 800115c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d008      	beq.n	800117c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2280      	movs	r2, #128	@ 0x80
 800116e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e052      	b.n	8001222 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0216 	bic.w	r2, r2, #22
 800118a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	695a      	ldr	r2, [r3, #20]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800119a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d103      	bne.n	80011ac <HAL_DMA_Abort+0x62>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d007      	beq.n	80011bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0208 	bic.w	r2, r2, #8
 80011ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0201 	bic.w	r2, r2, #1
 80011ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011cc:	e013      	b.n	80011f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ce:	f7ff fe7b 	bl	8000ec8 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b05      	cmp	r3, #5
 80011da:	d90c      	bls.n	80011f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2220      	movs	r2, #32
 80011e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2203      	movs	r2, #3
 80011e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e015      	b.n	8001222 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1e4      	bne.n	80011ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001208:	223f      	movs	r2, #63	@ 0x3f
 800120a:	409a      	lsls	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d004      	beq.n	8001248 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2280      	movs	r2, #128	@ 0x80
 8001242:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e00c      	b.n	8001262 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2205      	movs	r2, #5
 800124c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0201 	bic.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	@ 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	e165      	b.n	8001558 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800128c:	2201      	movs	r2, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	f040 8154 	bne.w	8001552 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d005      	beq.n	80012c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d130      	bne.n	8001324 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	2203      	movs	r2, #3
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f8:	2201      	movs	r2, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	091b      	lsrs	r3, r3, #4
 800130e:	f003 0201 	and.w	r2, r3, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b03      	cmp	r3, #3
 800132e:	d017      	beq.n	8001360 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d123      	bne.n	80013b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	08da      	lsrs	r2, r3, #3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3208      	adds	r2, #8
 8001374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	220f      	movs	r2, #15
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	691a      	ldr	r2, [r3, #16]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	08da      	lsrs	r2, r3, #3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3208      	adds	r2, #8
 80013ae:	69b9      	ldr	r1, [r7, #24]
 80013b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0203 	and.w	r2, r3, #3
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 80ae 	beq.w	8001552 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001570 <HAL_GPIO_Init+0x300>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fe:	4a5c      	ldr	r2, [pc, #368]	@ (8001570 <HAL_GPIO_Init+0x300>)
 8001400:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001404:	6453      	str	r3, [r2, #68]	@ 0x44
 8001406:	4b5a      	ldr	r3, [pc, #360]	@ (8001570 <HAL_GPIO_Init+0x300>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001412:	4a58      	ldr	r2, [pc, #352]	@ (8001574 <HAL_GPIO_Init+0x304>)
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3302      	adds	r3, #2
 800141a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	220f      	movs	r2, #15
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4f      	ldr	r2, [pc, #316]	@ (8001578 <HAL_GPIO_Init+0x308>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d025      	beq.n	800148a <HAL_GPIO_Init+0x21a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4e      	ldr	r2, [pc, #312]	@ (800157c <HAL_GPIO_Init+0x30c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d01f      	beq.n	8001486 <HAL_GPIO_Init+0x216>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4d      	ldr	r2, [pc, #308]	@ (8001580 <HAL_GPIO_Init+0x310>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d019      	beq.n	8001482 <HAL_GPIO_Init+0x212>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a4c      	ldr	r2, [pc, #304]	@ (8001584 <HAL_GPIO_Init+0x314>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d013      	beq.n	800147e <HAL_GPIO_Init+0x20e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a4b      	ldr	r2, [pc, #300]	@ (8001588 <HAL_GPIO_Init+0x318>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d00d      	beq.n	800147a <HAL_GPIO_Init+0x20a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a4a      	ldr	r2, [pc, #296]	@ (800158c <HAL_GPIO_Init+0x31c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d007      	beq.n	8001476 <HAL_GPIO_Init+0x206>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a49      	ldr	r2, [pc, #292]	@ (8001590 <HAL_GPIO_Init+0x320>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d101      	bne.n	8001472 <HAL_GPIO_Init+0x202>
 800146e:	2306      	movs	r3, #6
 8001470:	e00c      	b.n	800148c <HAL_GPIO_Init+0x21c>
 8001472:	2307      	movs	r3, #7
 8001474:	e00a      	b.n	800148c <HAL_GPIO_Init+0x21c>
 8001476:	2305      	movs	r3, #5
 8001478:	e008      	b.n	800148c <HAL_GPIO_Init+0x21c>
 800147a:	2304      	movs	r3, #4
 800147c:	e006      	b.n	800148c <HAL_GPIO_Init+0x21c>
 800147e:	2303      	movs	r3, #3
 8001480:	e004      	b.n	800148c <HAL_GPIO_Init+0x21c>
 8001482:	2302      	movs	r3, #2
 8001484:	e002      	b.n	800148c <HAL_GPIO_Init+0x21c>
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <HAL_GPIO_Init+0x21c>
 800148a:	2300      	movs	r3, #0
 800148c:	69fa      	ldr	r2, [r7, #28]
 800148e:	f002 0203 	and.w	r2, r2, #3
 8001492:	0092      	lsls	r2, r2, #2
 8001494:	4093      	lsls	r3, r2
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800149c:	4935      	ldr	r1, [pc, #212]	@ (8001574 <HAL_GPIO_Init+0x304>)
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	089b      	lsrs	r3, r3, #2
 80014a2:	3302      	adds	r3, #2
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001594 <HAL_GPIO_Init+0x324>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ce:	4a31      	ldr	r2, [pc, #196]	@ (8001594 <HAL_GPIO_Init+0x324>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001594 <HAL_GPIO_Init+0x324>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f8:	4a26      	ldr	r2, [pc, #152]	@ (8001594 <HAL_GPIO_Init+0x324>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014fe:	4b25      	ldr	r3, [pc, #148]	@ (8001594 <HAL_GPIO_Init+0x324>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001522:	4a1c      	ldr	r2, [pc, #112]	@ (8001594 <HAL_GPIO_Init+0x324>)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001528:	4b1a      	ldr	r3, [pc, #104]	@ (8001594 <HAL_GPIO_Init+0x324>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800154c:	4a11      	ldr	r2, [pc, #68]	@ (8001594 <HAL_GPIO_Init+0x324>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3301      	adds	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	2b0f      	cmp	r3, #15
 800155c:	f67f ae96 	bls.w	800128c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	3724      	adds	r7, #36	@ 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40013800 	.word	0x40013800
 8001578:	40020000 	.word	0x40020000
 800157c:	40020400 	.word	0x40020400
 8001580:	40020800 	.word	0x40020800
 8001584:	40020c00 	.word	0x40020c00
 8001588:	40021000 	.word	0x40021000
 800158c:	40021400 	.word	0x40021400
 8001590:	40021800 	.word	0x40021800
 8001594:	40013c00 	.word	0x40013c00

08001598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	807b      	strh	r3, [r7, #2]
 80015a4:	4613      	mov	r3, r2
 80015a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a8:	787b      	ldrb	r3, [r7, #1]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ae:	887a      	ldrh	r2, [r7, #2]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015b4:	e003      	b.n	80015be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015b6:	887b      	ldrh	r3, [r7, #2]
 80015b8:	041a      	lsls	r2, r3, #16
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	619a      	str	r2, [r3, #24]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015d6:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015d8:	695a      	ldr	r2, [r3, #20]
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	4013      	ands	r3, r2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d006      	beq.n	80015f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015e2:	4a05      	ldr	r2, [pc, #20]	@ (80015f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff f840 	bl	8000670 <HAL_GPIO_EXTI_Callback>
  }
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40013c00 	.word	0x40013c00

080015fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	4b20      	ldr	r3, [pc, #128]	@ (800168c <HAL_PWREx_EnableOverDrive+0x90>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	4a1f      	ldr	r2, [pc, #124]	@ (800168c <HAL_PWREx_EnableOverDrive+0x90>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001614:	6413      	str	r3, [r2, #64]	@ 0x40
 8001616:	4b1d      	ldr	r3, [pc, #116]	@ (800168c <HAL_PWREx_EnableOverDrive+0x90>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001622:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <HAL_PWREx_EnableOverDrive+0x94>)
 8001624:	2201      	movs	r2, #1
 8001626:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001628:	f7ff fc4e 	bl	8000ec8 <HAL_GetTick>
 800162c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800162e:	e009      	b.n	8001644 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001630:	f7ff fc4a 	bl	8000ec8 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800163e:	d901      	bls.n	8001644 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e01f      	b.n	8001684 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001644:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <HAL_PWREx_EnableOverDrive+0x98>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800164c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001650:	d1ee      	bne.n	8001630 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001652:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001658:	f7ff fc36 	bl	8000ec8 <HAL_GetTick>
 800165c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800165e:	e009      	b.n	8001674 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001660:	f7ff fc32 	bl	8000ec8 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800166e:	d901      	bls.n	8001674 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e007      	b.n	8001684 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001674:	4b07      	ldr	r3, [pc, #28]	@ (8001694 <HAL_PWREx_EnableOverDrive+0x98>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001680:	d1ee      	bne.n	8001660 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40023800 	.word	0x40023800
 8001690:	420e0040 	.word	0x420e0040
 8001694:	40007000 	.word	0x40007000
 8001698:	420e0044 	.word	0x420e0044

0800169c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e0cc      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016b0:	4b68      	ldr	r3, [pc, #416]	@ (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 030f 	and.w	r3, r3, #15
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d90c      	bls.n	80016d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016be:	4b65      	ldr	r3, [pc, #404]	@ (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c6:	4b63      	ldr	r3, [pc, #396]	@ (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0b8      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d020      	beq.n	8001726 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016f0:	4b59      	ldr	r3, [pc, #356]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	4a58      	ldr	r2, [pc, #352]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001708:	4b53      	ldr	r3, [pc, #332]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	4a52      	ldr	r2, [pc, #328]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001712:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001714:	4b50      	ldr	r3, [pc, #320]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	494d      	ldr	r1, [pc, #308]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	4313      	orrs	r3, r2
 8001724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d044      	beq.n	80017bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d107      	bne.n	800174a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173a:	4b47      	ldr	r3, [pc, #284]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d119      	bne.n	800177a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e07f      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d003      	beq.n	800175a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001756:	2b03      	cmp	r3, #3
 8001758:	d107      	bne.n	800176a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175a:	4b3f      	ldr	r3, [pc, #252]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d109      	bne.n	800177a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e06f      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176a:	4b3b      	ldr	r3, [pc, #236]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e067      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800177a:	4b37      	ldr	r3, [pc, #220]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f023 0203 	bic.w	r2, r3, #3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	4934      	ldr	r1, [pc, #208]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	4313      	orrs	r3, r2
 800178a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800178c:	f7ff fb9c 	bl	8000ec8 <HAL_GetTick>
 8001790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001792:	e00a      	b.n	80017aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001794:	f7ff fb98 	bl	8000ec8 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e04f      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 020c 	and.w	r2, r3, #12
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d1eb      	bne.n	8001794 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017bc:	4b25      	ldr	r3, [pc, #148]	@ (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d20c      	bcs.n	80017e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ca:	4b22      	ldr	r3, [pc, #136]	@ (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d2:	4b20      	ldr	r3, [pc, #128]	@ (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e032      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f0:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	4916      	ldr	r1, [pc, #88]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d009      	beq.n	8001822 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800180e:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	490e      	ldr	r1, [pc, #56]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001822:	f000 f855 	bl	80018d0 <HAL_RCC_GetSysClockFreq>
 8001826:	4602      	mov	r2, r0
 8001828:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	091b      	lsrs	r3, r3, #4
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	490a      	ldr	r1, [pc, #40]	@ (800185c <HAL_RCC_ClockConfig+0x1c0>)
 8001834:	5ccb      	ldrb	r3, [r1, r3]
 8001836:	fa22 f303 	lsr.w	r3, r2, r3
 800183a:	4a09      	ldr	r2, [pc, #36]	@ (8001860 <HAL_RCC_ClockConfig+0x1c4>)
 800183c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800183e:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <HAL_RCC_ClockConfig+0x1c8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fafc 	bl	8000e40 <HAL_InitTick>

  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023c00 	.word	0x40023c00
 8001858:	40023800 	.word	0x40023800
 800185c:	080034b8 	.word	0x080034b8
 8001860:	20000000 	.word	0x20000000
 8001864:	20000004 	.word	0x20000004

08001868 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800186c:	4b03      	ldr	r3, [pc, #12]	@ (800187c <HAL_RCC_GetHCLKFreq+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000000 	.word	0x20000000

08001880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001884:	f7ff fff0 	bl	8001868 <HAL_RCC_GetHCLKFreq>
 8001888:	4602      	mov	r2, r0
 800188a:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	0a9b      	lsrs	r3, r3, #10
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	4903      	ldr	r1, [pc, #12]	@ (80018a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001896:	5ccb      	ldrb	r3, [r1, r3]
 8001898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800189c:	4618      	mov	r0, r3
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800
 80018a4:	080034c8 	.word	0x080034c8

080018a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018ac:	f7ff ffdc 	bl	8001868 <HAL_RCC_GetHCLKFreq>
 80018b0:	4602      	mov	r2, r0
 80018b2:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	0b5b      	lsrs	r3, r3, #13
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	4903      	ldr	r1, [pc, #12]	@ (80018cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018be:	5ccb      	ldrb	r3, [r1, r3]
 80018c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40023800 	.word	0x40023800
 80018cc:	080034c8 	.word	0x080034c8

080018d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018d4:	b0ae      	sub	sp, #184	@ 0xb8
 80018d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80018de:	2300      	movs	r3, #0
 80018e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018f6:	4bcb      	ldr	r3, [pc, #812]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x354>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b0c      	cmp	r3, #12
 8001900:	f200 8206 	bhi.w	8001d10 <HAL_RCC_GetSysClockFreq+0x440>
 8001904:	a201      	add	r2, pc, #4	@ (adr r2, 800190c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190a:	bf00      	nop
 800190c:	08001941 	.word	0x08001941
 8001910:	08001d11 	.word	0x08001d11
 8001914:	08001d11 	.word	0x08001d11
 8001918:	08001d11 	.word	0x08001d11
 800191c:	08001949 	.word	0x08001949
 8001920:	08001d11 	.word	0x08001d11
 8001924:	08001d11 	.word	0x08001d11
 8001928:	08001d11 	.word	0x08001d11
 800192c:	08001951 	.word	0x08001951
 8001930:	08001d11 	.word	0x08001d11
 8001934:	08001d11 	.word	0x08001d11
 8001938:	08001d11 	.word	0x08001d11
 800193c:	08001b41 	.word	0x08001b41
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001940:	4bb9      	ldr	r3, [pc, #740]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x358>)
 8001942:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001946:	e1e7      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001948:	4bb8      	ldr	r3, [pc, #736]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x35c>)
 800194a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800194e:	e1e3      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001950:	4bb4      	ldr	r3, [pc, #720]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001958:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800195c:	4bb1      	ldr	r3, [pc, #708]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x354>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d071      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001968:	4bae      	ldr	r3, [pc, #696]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x354>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	099b      	lsrs	r3, r3, #6
 800196e:	2200      	movs	r2, #0
 8001970:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001974:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001978:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800197c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001980:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001984:	2300      	movs	r3, #0
 8001986:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800198a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800198e:	4622      	mov	r2, r4
 8001990:	462b      	mov	r3, r5
 8001992:	f04f 0000 	mov.w	r0, #0
 8001996:	f04f 0100 	mov.w	r1, #0
 800199a:	0159      	lsls	r1, r3, #5
 800199c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019a0:	0150      	lsls	r0, r2, #5
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4621      	mov	r1, r4
 80019a8:	1a51      	subs	r1, r2, r1
 80019aa:	6439      	str	r1, [r7, #64]	@ 0x40
 80019ac:	4629      	mov	r1, r5
 80019ae:	eb63 0301 	sbc.w	r3, r3, r1
 80019b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80019c0:	4649      	mov	r1, r9
 80019c2:	018b      	lsls	r3, r1, #6
 80019c4:	4641      	mov	r1, r8
 80019c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ca:	4641      	mov	r1, r8
 80019cc:	018a      	lsls	r2, r1, #6
 80019ce:	4641      	mov	r1, r8
 80019d0:	1a51      	subs	r1, r2, r1
 80019d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80019d4:	4649      	mov	r1, r9
 80019d6:	eb63 0301 	sbc.w	r3, r3, r1
 80019da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80019e8:	4649      	mov	r1, r9
 80019ea:	00cb      	lsls	r3, r1, #3
 80019ec:	4641      	mov	r1, r8
 80019ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80019f2:	4641      	mov	r1, r8
 80019f4:	00ca      	lsls	r2, r1, #3
 80019f6:	4610      	mov	r0, r2
 80019f8:	4619      	mov	r1, r3
 80019fa:	4603      	mov	r3, r0
 80019fc:	4622      	mov	r2, r4
 80019fe:	189b      	adds	r3, r3, r2
 8001a00:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a02:	462b      	mov	r3, r5
 8001a04:	460a      	mov	r2, r1
 8001a06:	eb42 0303 	adc.w	r3, r2, r3
 8001a0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a18:	4629      	mov	r1, r5
 8001a1a:	024b      	lsls	r3, r1, #9
 8001a1c:	4621      	mov	r1, r4
 8001a1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a22:	4621      	mov	r1, r4
 8001a24:	024a      	lsls	r2, r1, #9
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001a34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001a38:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001a3c:	f7fe fbe2 	bl	8000204 <__aeabi_uldivmod>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4613      	mov	r3, r2
 8001a46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001a4a:	e067      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4c:	4b75      	ldr	r3, [pc, #468]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	099b      	lsrs	r3, r3, #6
 8001a52:	2200      	movs	r2, #0
 8001a54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001a58:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001a5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001a66:	2300      	movs	r3, #0
 8001a68:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001a6a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001a6e:	4622      	mov	r2, r4
 8001a70:	462b      	mov	r3, r5
 8001a72:	f04f 0000 	mov.w	r0, #0
 8001a76:	f04f 0100 	mov.w	r1, #0
 8001a7a:	0159      	lsls	r1, r3, #5
 8001a7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a80:	0150      	lsls	r0, r2, #5
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4621      	mov	r1, r4
 8001a88:	1a51      	subs	r1, r2, r1
 8001a8a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001a8c:	4629      	mov	r1, r5
 8001a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001aa0:	4649      	mov	r1, r9
 8001aa2:	018b      	lsls	r3, r1, #6
 8001aa4:	4641      	mov	r1, r8
 8001aa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aaa:	4641      	mov	r1, r8
 8001aac:	018a      	lsls	r2, r1, #6
 8001aae:	4641      	mov	r1, r8
 8001ab0:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ab4:	4649      	mov	r1, r9
 8001ab6:	eb63 0b01 	sbc.w	fp, r3, r1
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ac6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001aca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ace:	4692      	mov	sl, r2
 8001ad0:	469b      	mov	fp, r3
 8001ad2:	4623      	mov	r3, r4
 8001ad4:	eb1a 0303 	adds.w	r3, sl, r3
 8001ad8:	623b      	str	r3, [r7, #32]
 8001ada:	462b      	mov	r3, r5
 8001adc:	eb4b 0303 	adc.w	r3, fp, r3
 8001ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001aee:	4629      	mov	r1, r5
 8001af0:	028b      	lsls	r3, r1, #10
 8001af2:	4621      	mov	r1, r4
 8001af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001af8:	4621      	mov	r1, r4
 8001afa:	028a      	lsls	r2, r1, #10
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b04:	2200      	movs	r2, #0
 8001b06:	673b      	str	r3, [r7, #112]	@ 0x70
 8001b08:	677a      	str	r2, [r7, #116]	@ 0x74
 8001b0a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001b0e:	f7fe fb79 	bl	8000204 <__aeabi_uldivmod>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4613      	mov	r3, r2
 8001b18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b1c:	4b41      	ldr	r3, [pc, #260]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	0c1b      	lsrs	r3, r3, #16
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	3301      	adds	r3, #1
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001b2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001b32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b3e:	e0eb      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b40:	4b38      	ldr	r3, [pc, #224]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b4c:	4b35      	ldr	r3, [pc, #212]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d06b      	beq.n	8001c30 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b58:	4b32      	ldr	r3, [pc, #200]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	099b      	lsrs	r3, r3, #6
 8001b5e:	2200      	movs	r2, #0
 8001b60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001b62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001b64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001b70:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001b74:	4622      	mov	r2, r4
 8001b76:	462b      	mov	r3, r5
 8001b78:	f04f 0000 	mov.w	r0, #0
 8001b7c:	f04f 0100 	mov.w	r1, #0
 8001b80:	0159      	lsls	r1, r3, #5
 8001b82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b86:	0150      	lsls	r0, r2, #5
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4621      	mov	r1, r4
 8001b8e:	1a51      	subs	r1, r2, r1
 8001b90:	61b9      	str	r1, [r7, #24]
 8001b92:	4629      	mov	r1, r5
 8001b94:	eb63 0301 	sbc.w	r3, r3, r1
 8001b98:	61fb      	str	r3, [r7, #28]
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001ba6:	4659      	mov	r1, fp
 8001ba8:	018b      	lsls	r3, r1, #6
 8001baa:	4651      	mov	r1, sl
 8001bac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bb0:	4651      	mov	r1, sl
 8001bb2:	018a      	lsls	r2, r1, #6
 8001bb4:	4651      	mov	r1, sl
 8001bb6:	ebb2 0801 	subs.w	r8, r2, r1
 8001bba:	4659      	mov	r1, fp
 8001bbc:	eb63 0901 	sbc.w	r9, r3, r1
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bcc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bd0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bd4:	4690      	mov	r8, r2
 8001bd6:	4699      	mov	r9, r3
 8001bd8:	4623      	mov	r3, r4
 8001bda:	eb18 0303 	adds.w	r3, r8, r3
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	462b      	mov	r3, r5
 8001be2:	eb49 0303 	adc.w	r3, r9, r3
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	024b      	lsls	r3, r1, #9
 8001bf8:	4621      	mov	r1, r4
 8001bfa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bfe:	4621      	mov	r1, r4
 8001c00:	024a      	lsls	r2, r1, #9
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001c0e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001c10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c14:	f7fe faf6 	bl	8000204 <__aeabi_uldivmod>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001c22:	e065      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x420>
 8001c24:	40023800 	.word	0x40023800
 8001c28:	00f42400 	.word	0x00f42400
 8001c2c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c30:	4b3d      	ldr	r3, [pc, #244]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x458>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	099b      	lsrs	r3, r3, #6
 8001c36:	2200      	movs	r2, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c40:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c42:	2300      	movs	r3, #0
 8001c44:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c46:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001c4a:	4642      	mov	r2, r8
 8001c4c:	464b      	mov	r3, r9
 8001c4e:	f04f 0000 	mov.w	r0, #0
 8001c52:	f04f 0100 	mov.w	r1, #0
 8001c56:	0159      	lsls	r1, r3, #5
 8001c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c5c:	0150      	lsls	r0, r2, #5
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4641      	mov	r1, r8
 8001c64:	1a51      	subs	r1, r2, r1
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	4649      	mov	r1, r9
 8001c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001c7c:	4659      	mov	r1, fp
 8001c7e:	018b      	lsls	r3, r1, #6
 8001c80:	4651      	mov	r1, sl
 8001c82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c86:	4651      	mov	r1, sl
 8001c88:	018a      	lsls	r2, r1, #6
 8001c8a:	4651      	mov	r1, sl
 8001c8c:	1a54      	subs	r4, r2, r1
 8001c8e:	4659      	mov	r1, fp
 8001c90:	eb63 0501 	sbc.w	r5, r3, r1
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	00eb      	lsls	r3, r5, #3
 8001c9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ca2:	00e2      	lsls	r2, r4, #3
 8001ca4:	4614      	mov	r4, r2
 8001ca6:	461d      	mov	r5, r3
 8001ca8:	4643      	mov	r3, r8
 8001caa:	18e3      	adds	r3, r4, r3
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	464b      	mov	r3, r9
 8001cb0:	eb45 0303 	adc.w	r3, r5, r3
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cc2:	4629      	mov	r1, r5
 8001cc4:	028b      	lsls	r3, r1, #10
 8001cc6:	4621      	mov	r1, r4
 8001cc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ccc:	4621      	mov	r1, r4
 8001cce:	028a      	lsls	r2, r1, #10
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cd8:	2200      	movs	r2, #0
 8001cda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001cdc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001cde:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001ce2:	f7fe fa8f 	bl	8000204 <__aeabi_uldivmod>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4613      	mov	r3, r2
 8001cec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x458>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	0f1b      	lsrs	r3, r3, #28
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8001cfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001d02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001d0e:	e003      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001d12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001d16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	37b8      	adds	r7, #184	@ 0xb8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	00f42400 	.word	0x00f42400

08001d30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e28d      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 8083 	beq.w	8001e56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d50:	4b94      	ldr	r3, [pc, #592]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 030c 	and.w	r3, r3, #12
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d019      	beq.n	8001d90 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d5c:	4b91      	ldr	r3, [pc, #580]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d68:	4b8e      	ldr	r3, [pc, #568]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d74:	d00c      	beq.n	8001d90 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d76:	4b8b      	ldr	r3, [pc, #556]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d7e:	2b0c      	cmp	r3, #12
 8001d80:	d112      	bne.n	8001da8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d82:	4b88      	ldr	r3, [pc, #544]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d8e:	d10b      	bne.n	8001da8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d90:	4b84      	ldr	r3, [pc, #528]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d05b      	beq.n	8001e54 <HAL_RCC_OscConfig+0x124>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d157      	bne.n	8001e54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e25a      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001db0:	d106      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x90>
 8001db2:	4b7c      	ldr	r3, [pc, #496]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a7b      	ldr	r2, [pc, #492]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e01d      	b.n	8001dfc <HAL_RCC_OscConfig+0xcc>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0xb4>
 8001dca:	4b76      	ldr	r3, [pc, #472]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a75      	ldr	r2, [pc, #468]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001dd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	4b73      	ldr	r3, [pc, #460]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a72      	ldr	r2, [pc, #456]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e00b      	b.n	8001dfc <HAL_RCC_OscConfig+0xcc>
 8001de4:	4b6f      	ldr	r3, [pc, #444]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a6e      	ldr	r2, [pc, #440]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001dea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b6c      	ldr	r3, [pc, #432]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a6b      	ldr	r2, [pc, #428]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001df6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d013      	beq.n	8001e2c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7ff f860 	bl	8000ec8 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7ff f85c 	bl	8000ec8 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	@ 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e21f      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1e:	4b61      	ldr	r3, [pc, #388]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0xdc>
 8001e2a:	e014      	b.n	8001e56 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7ff f84c 	bl	8000ec8 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e34:	f7ff f848 	bl	8000ec8 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	@ 0x64
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e20b      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e46:	4b57      	ldr	r3, [pc, #348]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x104>
 8001e52:	e000      	b.n	8001e56 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d06f      	beq.n	8001f42 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e62:	4b50      	ldr	r3, [pc, #320]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d017      	beq.n	8001e9e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e6e:	4b4d      	ldr	r3, [pc, #308]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d105      	bne.n	8001e86 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e7a:	4b4a      	ldr	r3, [pc, #296]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00b      	beq.n	8001e9e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e86:	4b47      	ldr	r3, [pc, #284]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e8e:	2b0c      	cmp	r3, #12
 8001e90:	d11c      	bne.n	8001ecc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e92:	4b44      	ldr	r3, [pc, #272]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d116      	bne.n	8001ecc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9e:	4b41      	ldr	r3, [pc, #260]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d005      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x186>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d001      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e1d3      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4937      	ldr	r1, [pc, #220]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eca:	e03a      	b.n	8001f42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d020      	beq.n	8001f16 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed4:	4b34      	ldr	r3, [pc, #208]	@ (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eda:	f7fe fff5 	bl	8000ec8 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee2:	f7fe fff1 	bl	8000ec8 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e1b4      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef4:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f00:	4b28      	ldr	r3, [pc, #160]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4925      	ldr	r1, [pc, #148]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	600b      	str	r3, [r1, #0]
 8001f14:	e015      	b.n	8001f42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f16:	4b24      	ldr	r3, [pc, #144]	@ (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1c:	f7fe ffd4 	bl	8000ec8 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f24:	f7fe ffd0 	bl	8000ec8 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e193      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f36:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d036      	beq.n	8001fbc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d016      	beq.n	8001f84 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f56:	4b15      	ldr	r3, [pc, #84]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5c:	f7fe ffb4 	bl	8000ec8 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f64:	f7fe ffb0 	bl	8000ec8 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e173      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f76:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x234>
 8001f82:	e01b      	b.n	8001fbc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f84:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8a:	f7fe ff9d 	bl	8000ec8 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f90:	e00e      	b.n	8001fb0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f92:	f7fe ff99 	bl	8000ec8 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d907      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e15c      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	42470000 	.word	0x42470000
 8001fac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb0:	4b8a      	ldr	r3, [pc, #552]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8001fb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1ea      	bne.n	8001f92 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 8097 	beq.w	80020f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fce:	4b83      	ldr	r3, [pc, #524]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10f      	bne.n	8001ffa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	4b7f      	ldr	r3, [pc, #508]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	4a7e      	ldr	r2, [pc, #504]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8001fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fea:	4b7c      	ldr	r3, [pc, #496]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffa:	4b79      	ldr	r3, [pc, #484]	@ (80021e0 <HAL_RCC_OscConfig+0x4b0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d118      	bne.n	8002038 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002006:	4b76      	ldr	r3, [pc, #472]	@ (80021e0 <HAL_RCC_OscConfig+0x4b0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a75      	ldr	r2, [pc, #468]	@ (80021e0 <HAL_RCC_OscConfig+0x4b0>)
 800200c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002012:	f7fe ff59 	bl	8000ec8 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201a:	f7fe ff55 	bl	8000ec8 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e118      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202c:	4b6c      	ldr	r3, [pc, #432]	@ (80021e0 <HAL_RCC_OscConfig+0x4b0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d106      	bne.n	800204e <HAL_RCC_OscConfig+0x31e>
 8002040:	4b66      	ldr	r3, [pc, #408]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002044:	4a65      	ldr	r2, [pc, #404]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6713      	str	r3, [r2, #112]	@ 0x70
 800204c:	e01c      	b.n	8002088 <HAL_RCC_OscConfig+0x358>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b05      	cmp	r3, #5
 8002054:	d10c      	bne.n	8002070 <HAL_RCC_OscConfig+0x340>
 8002056:	4b61      	ldr	r3, [pc, #388]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800205a:	4a60      	ldr	r2, [pc, #384]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 800205c:	f043 0304 	orr.w	r3, r3, #4
 8002060:	6713      	str	r3, [r2, #112]	@ 0x70
 8002062:	4b5e      	ldr	r3, [pc, #376]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002066:	4a5d      	ldr	r2, [pc, #372]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6713      	str	r3, [r2, #112]	@ 0x70
 800206e:	e00b      	b.n	8002088 <HAL_RCC_OscConfig+0x358>
 8002070:	4b5a      	ldr	r3, [pc, #360]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002074:	4a59      	ldr	r2, [pc, #356]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	6713      	str	r3, [r2, #112]	@ 0x70
 800207c:	4b57      	ldr	r3, [pc, #348]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 800207e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002080:	4a56      	ldr	r2, [pc, #344]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002082:	f023 0304 	bic.w	r3, r3, #4
 8002086:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d015      	beq.n	80020bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002090:	f7fe ff1a 	bl	8000ec8 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002096:	e00a      	b.n	80020ae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002098:	f7fe ff16 	bl	8000ec8 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e0d7      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ae:	4b4b      	ldr	r3, [pc, #300]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 80020b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0ee      	beq.n	8002098 <HAL_RCC_OscConfig+0x368>
 80020ba:	e014      	b.n	80020e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020bc:	f7fe ff04 	bl	8000ec8 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c2:	e00a      	b.n	80020da <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c4:	f7fe ff00 	bl	8000ec8 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e0c1      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020da:	4b40      	ldr	r3, [pc, #256]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 80020dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1ee      	bne.n	80020c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ec:	4b3b      	ldr	r3, [pc, #236]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 80020ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f0:	4a3a      	ldr	r2, [pc, #232]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 80020f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80ad 	beq.w	800225c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002102:	4b36      	ldr	r3, [pc, #216]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b08      	cmp	r3, #8
 800210c:	d060      	beq.n	80021d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d145      	bne.n	80021a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002116:	4b33      	ldr	r3, [pc, #204]	@ (80021e4 <HAL_RCC_OscConfig+0x4b4>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7fe fed4 	bl	8000ec8 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002124:	f7fe fed0 	bl	8000ec8 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e093      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002136:	4b29      	ldr	r3, [pc, #164]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69da      	ldr	r2, [r3, #28]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002150:	019b      	lsls	r3, r3, #6
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002158:	085b      	lsrs	r3, r3, #1
 800215a:	3b01      	subs	r3, #1
 800215c:	041b      	lsls	r3, r3, #16
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002164:	061b      	lsls	r3, r3, #24
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216c:	071b      	lsls	r3, r3, #28
 800216e:	491b      	ldr	r1, [pc, #108]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002174:	4b1b      	ldr	r3, [pc, #108]	@ (80021e4 <HAL_RCC_OscConfig+0x4b4>)
 8002176:	2201      	movs	r2, #1
 8002178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217a:	f7fe fea5 	bl	8000ec8 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002182:	f7fe fea1 	bl	8000ec8 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e064      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002194:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x452>
 80021a0:	e05c      	b.n	800225c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a2:	4b10      	ldr	r3, [pc, #64]	@ (80021e4 <HAL_RCC_OscConfig+0x4b4>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7fe fe8e 	bl	8000ec8 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b0:	f7fe fe8a 	bl	8000ec8 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e04d      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c2:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <HAL_RCC_OscConfig+0x4ac>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x480>
 80021ce:	e045      	b.n	800225c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d107      	bne.n	80021e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e040      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40007000 	.word	0x40007000
 80021e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002268 <HAL_RCC_OscConfig+0x538>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d030      	beq.n	8002258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002200:	429a      	cmp	r2, r3
 8002202:	d129      	bne.n	8002258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d122      	bne.n	8002258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002218:	4013      	ands	r3, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800221e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002220:	4293      	cmp	r3, r2
 8002222:	d119      	bne.n	8002258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800222e:	085b      	lsrs	r3, r3, #1
 8002230:	3b01      	subs	r3, #1
 8002232:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002234:	429a      	cmp	r2, r3
 8002236:	d10f      	bne.n	8002258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002242:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002244:	429a      	cmp	r2, r3
 8002246:	d107      	bne.n	8002258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40023800 	.word	0x40023800

0800226c <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e05a      	b.n	8002336 <HAL_LIN_Init+0xca>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d106      	bne.n	800229a <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7fe fcb5 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2224      	movs	r2, #36	@ 0x24
 800229e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022b0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 fe54 	bl	8002f60 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022d6:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022e6:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0220 	bic.w	r2, r2, #32
 80022f6:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6919      	ldr	r1, [r3, #16]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002316:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2220      	movs	r2, #32
 8002322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2220      	movs	r2, #32
 800232a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b08a      	sub	sp, #40	@ 0x28
 8002342:	af02      	add	r7, sp, #8
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	603b      	str	r3, [r7, #0]
 800234a:	4613      	mov	r3, r2
 800234c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b20      	cmp	r3, #32
 800235c:	d175      	bne.n	800244a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_UART_Transmit+0x2c>
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e06e      	b.n	800244c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2221      	movs	r2, #33	@ 0x21
 8002378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800237c:	f7fe fda4 	bl	8000ec8 <HAL_GetTick>
 8002380:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	88fa      	ldrh	r2, [r7, #6]
 8002386:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	88fa      	ldrh	r2, [r7, #6]
 800238c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002396:	d108      	bne.n	80023aa <HAL_UART_Transmit+0x6c>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d104      	bne.n	80023aa <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	e003      	b.n	80023b2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023b2:	e02e      	b.n	8002412 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2200      	movs	r2, #0
 80023bc:	2180      	movs	r1, #128	@ 0x80
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 fbd8 	bl	8002b74 <UART_WaitOnFlagUntilTimeout>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d005      	beq.n	80023d6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2220      	movs	r2, #32
 80023ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e03a      	b.n	800244c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10b      	bne.n	80023f4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023ea:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	3302      	adds	r3, #2
 80023f0:	61bb      	str	r3, [r7, #24]
 80023f2:	e007      	b.n	8002404 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	781a      	ldrb	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3301      	adds	r3, #1
 8002402:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002408:	b29b      	uxth	r3, r3
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002416:	b29b      	uxth	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1cb      	bne.n	80023b4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2200      	movs	r2, #0
 8002424:	2140      	movs	r1, #64	@ 0x40
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 fba4 	bl	8002b74 <UART_WaitOnFlagUntilTimeout>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2220      	movs	r2, #32
 8002436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e006      	b.n	800244c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2220      	movs	r2, #32
 8002442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	e000      	b.n	800244c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800244a:	2302      	movs	r3, #2
  }
}
 800244c:	4618      	mov	r0, r3
 800244e:	3720      	adds	r7, #32
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	@ 0x28
 8002458:	af02      	add	r7, sp, #8
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	4613      	mov	r3, r2
 8002462:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b20      	cmp	r3, #32
 8002472:	f040 8081 	bne.w	8002578 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <HAL_UART_Receive+0x2e>
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e079      	b.n	800257a <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2222      	movs	r2, #34	@ 0x22
 8002490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800249a:	f7fe fd15 	bl	8000ec8 <HAL_GetTick>
 800249e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	88fa      	ldrh	r2, [r7, #6]
 80024a4:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	88fa      	ldrh	r2, [r7, #6]
 80024aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024b4:	d108      	bne.n	80024c8 <HAL_UART_Receive+0x74>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d104      	bne.n	80024c8 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	61bb      	str	r3, [r7, #24]
 80024c6:	e003      	b.n	80024d0 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80024d0:	e047      	b.n	8002562 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2200      	movs	r2, #0
 80024da:	2120      	movs	r1, #32
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 fb49 	bl	8002b74 <UART_WaitOnFlagUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e042      	b.n	800257a <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10c      	bne.n	8002514 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	b29b      	uxth	r3, r3
 8002502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002506:	b29a      	uxth	r2, r3
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	3302      	adds	r3, #2
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	e01f      	b.n	8002554 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800251c:	d007      	beq.n	800252e <HAL_UART_Receive+0xda>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10a      	bne.n	800253c <HAL_UART_Receive+0xe8>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d106      	bne.n	800253c <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	b2da      	uxtb	r2, r3
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	e008      	b.n	800254e <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002548:	b2da      	uxtb	r2, r3
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3301      	adds	r3, #1
 8002552:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002558:	b29b      	uxth	r3, r3
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002566:	b29b      	uxth	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1b2      	bne.n	80024d2 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	e000      	b.n	800257a <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002578:	2302      	movs	r3, #2
  }
}
 800257a:	4618      	mov	r0, r3
 800257c:	3720      	adds	r7, #32
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b0ba      	sub	sp, #232	@ 0xe8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80025c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10f      	bne.n	80025ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <HAL_UART_IRQHandler+0x66>
 80025d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 fbfe 	bl	8002de4 <UART_Receive_IT>
      return;
 80025e8:	e25b      	b.n	8002aa2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80025ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 80de 	beq.w	80027b0 <HAL_UART_IRQHandler+0x22c>
 80025f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d106      	bne.n	800260e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002604:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80d1 	beq.w	80027b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800260e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00b      	beq.n	8002632 <HAL_UART_IRQHandler+0xae>
 800261a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800261e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	f043 0201 	orr.w	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00b      	beq.n	8002656 <HAL_UART_IRQHandler+0xd2>
 800263e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264e:	f043 0202 	orr.w	r2, r3, #2
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00b      	beq.n	800267a <HAL_UART_IRQHandler+0xf6>
 8002662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002672:	f043 0204 	orr.w	r2, r3, #4
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800267a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d011      	beq.n	80026aa <HAL_UART_IRQHandler+0x126>
 8002686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	2b00      	cmp	r3, #0
 8002690:	d105      	bne.n	800269e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a2:	f043 0208 	orr.w	r2, r3, #8
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 81f2 	beq.w	8002a98 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026b8:	f003 0320 	and.w	r3, r3, #32
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_UART_IRQHandler+0x14e>
 80026c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fb89 	bl	8002de4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026dc:	2b40      	cmp	r3, #64	@ 0x40
 80026de:	bf0c      	ite	eq
 80026e0:	2301      	moveq	r3, #1
 80026e2:	2300      	movne	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d103      	bne.n	80026fe <HAL_UART_IRQHandler+0x17a>
 80026f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d04f      	beq.n	800279e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fa91 	bl	8002c26 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800270e:	2b40      	cmp	r3, #64	@ 0x40
 8002710:	d141      	bne.n	8002796 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	3314      	adds	r3, #20
 8002718:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800271c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002720:	e853 3f00 	ldrex	r3, [r3]
 8002724:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002728:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800272c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002730:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	3314      	adds	r3, #20
 800273a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800273e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002742:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002746:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800274a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800274e:	e841 2300 	strex	r3, r2, [r1]
 8002752:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002756:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1d9      	bne.n	8002712 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002762:	2b00      	cmp	r3, #0
 8002764:	d013      	beq.n	800278e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800276a:	4a7e      	ldr	r2, [pc, #504]	@ (8002964 <HAL_UART_IRQHandler+0x3e0>)
 800276c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe fd59 	bl	800122a <HAL_DMA_Abort_IT>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d016      	beq.n	80027ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002788:	4610      	mov	r0, r2
 800278a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800278c:	e00e      	b.n	80027ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f99e 	bl	8002ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002794:	e00a      	b.n	80027ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f99a 	bl	8002ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800279c:	e006      	b.n	80027ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f996 	bl	8002ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80027aa:	e175      	b.n	8002a98 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ac:	bf00      	nop
    return;
 80027ae:	e173      	b.n	8002a98 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	f040 814f 	bne.w	8002a58 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80027ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 8148 	beq.w	8002a58 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80027c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 8141 	beq.w	8002a58 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027f6:	2b40      	cmp	r3, #64	@ 0x40
 80027f8:	f040 80b6 	bne.w	8002968 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002808:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 8145 	beq.w	8002a9c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002816:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800281a:	429a      	cmp	r2, r3
 800281c:	f080 813e 	bcs.w	8002a9c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002826:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002832:	f000 8088 	beq.w	8002946 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	330c      	adds	r3, #12
 800283c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002840:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002844:	e853 3f00 	ldrex	r3, [r3]
 8002848:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800284c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002850:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002854:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	330c      	adds	r3, #12
 800285e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002862:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002866:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800286e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002872:	e841 2300 	strex	r3, r2, [r1]
 8002876:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800287a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1d9      	bne.n	8002836 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3314      	adds	r3, #20
 8002888:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800288c:	e853 3f00 	ldrex	r3, [r3]
 8002890:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002892:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	3314      	adds	r3, #20
 80028a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80028a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80028aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80028ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80028b2:	e841 2300 	strex	r3, r2, [r1]
 80028b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80028b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1e1      	bne.n	8002882 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	3314      	adds	r3, #20
 80028c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028c8:	e853 3f00 	ldrex	r3, [r3]
 80028cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80028ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	3314      	adds	r3, #20
 80028de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80028e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80028e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80028e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80028ea:	e841 2300 	strex	r3, r2, [r1]
 80028ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80028f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1e3      	bne.n	80028be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	330c      	adds	r3, #12
 800290a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800290e:	e853 3f00 	ldrex	r3, [r3]
 8002912:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002914:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002916:	f023 0310 	bic.w	r3, r3, #16
 800291a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	330c      	adds	r3, #12
 8002924:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002928:	65ba      	str	r2, [r7, #88]	@ 0x58
 800292a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800292e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002930:	e841 2300 	strex	r3, r2, [r1]
 8002934:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1e3      	bne.n	8002904 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002940:	4618      	mov	r0, r3
 8002942:	f7fe fc02 	bl	800114a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2202      	movs	r2, #2
 800294a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002954:	b29b      	uxth	r3, r3
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	b29b      	uxth	r3, r3
 800295a:	4619      	mov	r1, r3
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f8c1 	bl	8002ae4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002962:	e09b      	b.n	8002a9c <HAL_UART_IRQHandler+0x518>
 8002964:	08002ced 	.word	0x08002ced
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002970:	b29b      	uxth	r3, r3
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 808e 	beq.w	8002aa0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002984:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 8089 	beq.w	8002aa0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	330c      	adds	r3, #12
 8002994:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002998:	e853 3f00 	ldrex	r3, [r3]
 800299c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800299e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	330c      	adds	r3, #12
 80029ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80029b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80029b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80029b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029ba:	e841 2300 	strex	r3, r2, [r1]
 80029be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80029c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1e3      	bne.n	800298e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3314      	adds	r3, #20
 80029cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d0:	e853 3f00 	ldrex	r3, [r3]
 80029d4:	623b      	str	r3, [r7, #32]
   return(result);
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3314      	adds	r3, #20
 80029e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80029ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80029ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80029f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029f2:	e841 2300 	strex	r3, r2, [r1]
 80029f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80029f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1e3      	bne.n	80029c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	330c      	adds	r3, #12
 8002a12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	e853 3f00 	ldrex	r3, [r3]
 8002a1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 0310 	bic.w	r3, r3, #16
 8002a22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	330c      	adds	r3, #12
 8002a2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002a30:	61fa      	str	r2, [r7, #28]
 8002a32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a34:	69b9      	ldr	r1, [r7, #24]
 8002a36:	69fa      	ldr	r2, [r7, #28]
 8002a38:	e841 2300 	strex	r3, r2, [r1]
 8002a3c:	617b      	str	r3, [r7, #20]
   return(result);
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1e3      	bne.n	8002a0c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a4e:	4619      	mov	r1, r3
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f847 	bl	8002ae4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a56:	e023      	b.n	8002aa0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d009      	beq.n	8002a78 <HAL_UART_IRQHandler+0x4f4>
 8002a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f94f 	bl	8002d14 <UART_Transmit_IT>
    return;
 8002a76:	e014      	b.n	8002aa2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00e      	beq.n	8002aa2 <HAL_UART_IRQHandler+0x51e>
 8002a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f98f 	bl	8002db4 <UART_EndTransmit_IT>
    return;
 8002a96:	e004      	b.n	8002aa2 <HAL_UART_IRQHandler+0x51e>
    return;
 8002a98:	bf00      	nop
 8002a9a:	e002      	b.n	8002aa2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002a9c:	bf00      	nop
 8002a9e:	e000      	b.n	8002aa2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002aa0:	bf00      	nop
  }
}
 8002aa2:	37e8      	adds	r7, #232	@ 0xe8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_LIN_SendBreak>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	@ 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_LIN_SendBreak+0x16>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e02a      	b.n	8002b68 <HAL_LIN_SendBreak+0x6c>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2224      	movs	r2, #36	@ 0x24
 8002b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Send break characters */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	330c      	adds	r3, #12
 8002b28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	e853 3f00 	ldrex	r3, [r3]
 8002b30:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	61fb      	str	r3, [r7, #28]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	330c      	adds	r3, #12
 8002b40:	69fa      	ldr	r2, [r7, #28]
 8002b42:	61ba      	str	r2, [r7, #24]
 8002b44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b46:	6979      	ldr	r1, [r7, #20]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	e841 2300 	strex	r3, r2, [r1]
 8002b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1e5      	bne.n	8002b22 <HAL_LIN_SendBreak+0x26>

  huart->gState = HAL_UART_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3724      	adds	r7, #36	@ 0x24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	4613      	mov	r3, r2
 8002b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b84:	e03b      	b.n	8002bfe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8c:	d037      	beq.n	8002bfe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8e:	f7fe f99b 	bl	8000ec8 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	6a3a      	ldr	r2, [r7, #32]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d302      	bcc.n	8002ba4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e03a      	b.n	8002c1e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d023      	beq.n	8002bfe <UART_WaitOnFlagUntilTimeout+0x8a>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b80      	cmp	r3, #128	@ 0x80
 8002bba:	d020      	beq.n	8002bfe <UART_WaitOnFlagUntilTimeout+0x8a>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b40      	cmp	r3, #64	@ 0x40
 8002bc0:	d01d      	beq.n	8002bfe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d116      	bne.n	8002bfe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f81d 	bl	8002c26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2208      	movs	r2, #8
 8002bf0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e00f      	b.n	8002c1e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	4013      	ands	r3, r2
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	bf0c      	ite	eq
 8002c0e:	2301      	moveq	r3, #1
 8002c10:	2300      	movne	r3, #0
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d0b4      	beq.n	8002b86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b095      	sub	sp, #84	@ 0x54
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	330c      	adds	r3, #12
 8002c34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c38:	e853 3f00 	ldrex	r3, [r3]
 8002c3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	330c      	adds	r3, #12
 8002c4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c4e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c56:	e841 2300 	strex	r3, r2, [r1]
 8002c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1e5      	bne.n	8002c2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3314      	adds	r3, #20
 8002c68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	e853 3f00 	ldrex	r3, [r3]
 8002c70:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	3314      	adds	r3, #20
 8002c80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c8a:	e841 2300 	strex	r3, r2, [r1]
 8002c8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1e5      	bne.n	8002c62 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d119      	bne.n	8002cd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	330c      	adds	r3, #12
 8002ca4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	e853 3f00 	ldrex	r3, [r3]
 8002cac:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f023 0310 	bic.w	r3, r3, #16
 8002cb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	330c      	adds	r3, #12
 8002cbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cbe:	61ba      	str	r2, [r7, #24]
 8002cc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc2:	6979      	ldr	r1, [r7, #20]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	e841 2300 	strex	r3, r2, [r1]
 8002cca:	613b      	str	r3, [r7, #16]
   return(result);
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1e5      	bne.n	8002c9e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ce0:	bf00      	nop
 8002ce2:	3754      	adds	r7, #84	@ 0x54
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f7ff fee2 	bl	8002ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d0c:	bf00      	nop
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b21      	cmp	r3, #33	@ 0x21
 8002d26:	d13e      	bne.n	8002da6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d30:	d114      	bne.n	8002d5c <UART_Transmit_IT+0x48>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d110      	bne.n	8002d5c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d4e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	1c9a      	adds	r2, r3, #2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	621a      	str	r2, [r3, #32]
 8002d5a:	e008      	b.n	8002d6e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	1c59      	adds	r1, r3, #1
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6211      	str	r1, [r2, #32]
 8002d66:	781a      	ldrb	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10f      	bne.n	8002da2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002da0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	e000      	b.n	8002da8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002da6:	2302      	movs	r3, #2
  }
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff fe67 	bl	8002aa8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08c      	sub	sp, #48	@ 0x30
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b22      	cmp	r3, #34	@ 0x22
 8002df6:	f040 80ae 	bne.w	8002f56 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e02:	d117      	bne.n	8002e34 <UART_Receive_IT+0x50>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d113      	bne.n	8002e34 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e14:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2c:	1c9a      	adds	r2, r3, #2
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e32:	e026      	b.n	8002e82 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e46:	d007      	beq.n	8002e58 <UART_Receive_IT+0x74>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <UART_Receive_IT+0x82>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d106      	bne.n	8002e66 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e62:	701a      	strb	r2, [r3, #0]
 8002e64:	e008      	b.n	8002e78 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e76:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	4619      	mov	r1, r3
 8002e90:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d15d      	bne.n	8002f52 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0220 	bic.w	r2, r2, #32
 8002ea4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002eb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695a      	ldr	r2, [r3, #20]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0201 	bic.w	r2, r2, #1
 8002ec4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d135      	bne.n	8002f48 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	330c      	adds	r3, #12
 8002ee8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	e853 3f00 	ldrex	r3, [r3]
 8002ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f023 0310 	bic.w	r3, r3, #16
 8002ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	330c      	adds	r3, #12
 8002f00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f02:	623a      	str	r2, [r7, #32]
 8002f04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f06:	69f9      	ldr	r1, [r7, #28]
 8002f08:	6a3a      	ldr	r2, [r7, #32]
 8002f0a:	e841 2300 	strex	r3, r2, [r1]
 8002f0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1e5      	bne.n	8002ee2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	2b10      	cmp	r3, #16
 8002f22:	d10a      	bne.n	8002f3a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f3e:	4619      	mov	r1, r3
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff fdcf 	bl	8002ae4 <HAL_UARTEx_RxEventCallback>
 8002f46:	e002      	b.n	8002f4e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff fdb7 	bl	8002abc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	e002      	b.n	8002f58 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	e000      	b.n	8002f58 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002f56:	2302      	movs	r3, #2
  }
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3730      	adds	r7, #48	@ 0x30
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f64:	b0c0      	sub	sp, #256	@ 0x100
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f7c:	68d9      	ldr	r1, [r3, #12]
 8002f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	ea40 0301 	orr.w	r3, r0, r1
 8002f88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002fb8:	f021 010c 	bic.w	r1, r1, #12
 8002fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002fc6:	430b      	orrs	r3, r1
 8002fc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fda:	6999      	ldr	r1, [r3, #24]
 8002fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	ea40 0301 	orr.w	r3, r0, r1
 8002fe6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	4b8f      	ldr	r3, [pc, #572]	@ (800322c <UART_SetConfig+0x2cc>)
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d005      	beq.n	8003000 <UART_SetConfig+0xa0>
 8002ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	4b8d      	ldr	r3, [pc, #564]	@ (8003230 <UART_SetConfig+0x2d0>)
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d104      	bne.n	800300a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003000:	f7fe fc52 	bl	80018a8 <HAL_RCC_GetPCLK2Freq>
 8003004:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003008:	e003      	b.n	8003012 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800300a:	f7fe fc39 	bl	8001880 <HAL_RCC_GetPCLK1Freq>
 800300e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800301c:	f040 810c 	bne.w	8003238 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003024:	2200      	movs	r2, #0
 8003026:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800302a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800302e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003032:	4622      	mov	r2, r4
 8003034:	462b      	mov	r3, r5
 8003036:	1891      	adds	r1, r2, r2
 8003038:	65b9      	str	r1, [r7, #88]	@ 0x58
 800303a:	415b      	adcs	r3, r3
 800303c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800303e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003042:	4621      	mov	r1, r4
 8003044:	eb12 0801 	adds.w	r8, r2, r1
 8003048:	4629      	mov	r1, r5
 800304a:	eb43 0901 	adc.w	r9, r3, r1
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800305a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800305e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003062:	4690      	mov	r8, r2
 8003064:	4699      	mov	r9, r3
 8003066:	4623      	mov	r3, r4
 8003068:	eb18 0303 	adds.w	r3, r8, r3
 800306c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003070:	462b      	mov	r3, r5
 8003072:	eb49 0303 	adc.w	r3, r9, r3
 8003076:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800307a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003086:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800308a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800308e:	460b      	mov	r3, r1
 8003090:	18db      	adds	r3, r3, r3
 8003092:	653b      	str	r3, [r7, #80]	@ 0x50
 8003094:	4613      	mov	r3, r2
 8003096:	eb42 0303 	adc.w	r3, r2, r3
 800309a:	657b      	str	r3, [r7, #84]	@ 0x54
 800309c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80030a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80030a4:	f7fd f8ae 	bl	8000204 <__aeabi_uldivmod>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4b61      	ldr	r3, [pc, #388]	@ (8003234 <UART_SetConfig+0x2d4>)
 80030ae:	fba3 2302 	umull	r2, r3, r3, r2
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	011c      	lsls	r4, r3, #4
 80030b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030ba:	2200      	movs	r2, #0
 80030bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80030c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80030c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80030c8:	4642      	mov	r2, r8
 80030ca:	464b      	mov	r3, r9
 80030cc:	1891      	adds	r1, r2, r2
 80030ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80030d0:	415b      	adcs	r3, r3
 80030d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80030d8:	4641      	mov	r1, r8
 80030da:	eb12 0a01 	adds.w	sl, r2, r1
 80030de:	4649      	mov	r1, r9
 80030e0:	eb43 0b01 	adc.w	fp, r3, r1
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030f8:	4692      	mov	sl, r2
 80030fa:	469b      	mov	fp, r3
 80030fc:	4643      	mov	r3, r8
 80030fe:	eb1a 0303 	adds.w	r3, sl, r3
 8003102:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003106:	464b      	mov	r3, r9
 8003108:	eb4b 0303 	adc.w	r3, fp, r3
 800310c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800311c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003120:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003124:	460b      	mov	r3, r1
 8003126:	18db      	adds	r3, r3, r3
 8003128:	643b      	str	r3, [r7, #64]	@ 0x40
 800312a:	4613      	mov	r3, r2
 800312c:	eb42 0303 	adc.w	r3, r2, r3
 8003130:	647b      	str	r3, [r7, #68]	@ 0x44
 8003132:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003136:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800313a:	f7fd f863 	bl	8000204 <__aeabi_uldivmod>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4611      	mov	r1, r2
 8003144:	4b3b      	ldr	r3, [pc, #236]	@ (8003234 <UART_SetConfig+0x2d4>)
 8003146:	fba3 2301 	umull	r2, r3, r3, r1
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	2264      	movs	r2, #100	@ 0x64
 800314e:	fb02 f303 	mul.w	r3, r2, r3
 8003152:	1acb      	subs	r3, r1, r3
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800315a:	4b36      	ldr	r3, [pc, #216]	@ (8003234 <UART_SetConfig+0x2d4>)
 800315c:	fba3 2302 	umull	r2, r3, r3, r2
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003168:	441c      	add	r4, r3
 800316a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800316e:	2200      	movs	r2, #0
 8003170:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003174:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003178:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800317c:	4642      	mov	r2, r8
 800317e:	464b      	mov	r3, r9
 8003180:	1891      	adds	r1, r2, r2
 8003182:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003184:	415b      	adcs	r3, r3
 8003186:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003188:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800318c:	4641      	mov	r1, r8
 800318e:	1851      	adds	r1, r2, r1
 8003190:	6339      	str	r1, [r7, #48]	@ 0x30
 8003192:	4649      	mov	r1, r9
 8003194:	414b      	adcs	r3, r1
 8003196:	637b      	str	r3, [r7, #52]	@ 0x34
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	f04f 0300 	mov.w	r3, #0
 80031a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80031a4:	4659      	mov	r1, fp
 80031a6:	00cb      	lsls	r3, r1, #3
 80031a8:	4651      	mov	r1, sl
 80031aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ae:	4651      	mov	r1, sl
 80031b0:	00ca      	lsls	r2, r1, #3
 80031b2:	4610      	mov	r0, r2
 80031b4:	4619      	mov	r1, r3
 80031b6:	4603      	mov	r3, r0
 80031b8:	4642      	mov	r2, r8
 80031ba:	189b      	adds	r3, r3, r2
 80031bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031c0:	464b      	mov	r3, r9
 80031c2:	460a      	mov	r2, r1
 80031c4:	eb42 0303 	adc.w	r3, r2, r3
 80031c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80031d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80031dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80031e0:	460b      	mov	r3, r1
 80031e2:	18db      	adds	r3, r3, r3
 80031e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031e6:	4613      	mov	r3, r2
 80031e8:	eb42 0303 	adc.w	r3, r2, r3
 80031ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80031f6:	f7fd f805 	bl	8000204 <__aeabi_uldivmod>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003234 <UART_SetConfig+0x2d4>)
 8003200:	fba3 1302 	umull	r1, r3, r3, r2
 8003204:	095b      	lsrs	r3, r3, #5
 8003206:	2164      	movs	r1, #100	@ 0x64
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	3332      	adds	r3, #50	@ 0x32
 8003212:	4a08      	ldr	r2, [pc, #32]	@ (8003234 <UART_SetConfig+0x2d4>)
 8003214:	fba2 2303 	umull	r2, r3, r2, r3
 8003218:	095b      	lsrs	r3, r3, #5
 800321a:	f003 0207 	and.w	r2, r3, #7
 800321e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4422      	add	r2, r4
 8003226:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003228:	e106      	b.n	8003438 <UART_SetConfig+0x4d8>
 800322a:	bf00      	nop
 800322c:	40011000 	.word	0x40011000
 8003230:	40011400 	.word	0x40011400
 8003234:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800323c:	2200      	movs	r2, #0
 800323e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003242:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003246:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800324a:	4642      	mov	r2, r8
 800324c:	464b      	mov	r3, r9
 800324e:	1891      	adds	r1, r2, r2
 8003250:	6239      	str	r1, [r7, #32]
 8003252:	415b      	adcs	r3, r3
 8003254:	627b      	str	r3, [r7, #36]	@ 0x24
 8003256:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800325a:	4641      	mov	r1, r8
 800325c:	1854      	adds	r4, r2, r1
 800325e:	4649      	mov	r1, r9
 8003260:	eb43 0501 	adc.w	r5, r3, r1
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	00eb      	lsls	r3, r5, #3
 800326e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003272:	00e2      	lsls	r2, r4, #3
 8003274:	4614      	mov	r4, r2
 8003276:	461d      	mov	r5, r3
 8003278:	4643      	mov	r3, r8
 800327a:	18e3      	adds	r3, r4, r3
 800327c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003280:	464b      	mov	r3, r9
 8003282:	eb45 0303 	adc.w	r3, r5, r3
 8003286:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800328a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003296:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80032a6:	4629      	mov	r1, r5
 80032a8:	008b      	lsls	r3, r1, #2
 80032aa:	4621      	mov	r1, r4
 80032ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032b0:	4621      	mov	r1, r4
 80032b2:	008a      	lsls	r2, r1, #2
 80032b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80032b8:	f7fc ffa4 	bl	8000204 <__aeabi_uldivmod>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4b60      	ldr	r3, [pc, #384]	@ (8003444 <UART_SetConfig+0x4e4>)
 80032c2:	fba3 2302 	umull	r2, r3, r3, r2
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	011c      	lsls	r4, r3, #4
 80032ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032ce:	2200      	movs	r2, #0
 80032d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80032d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80032dc:	4642      	mov	r2, r8
 80032de:	464b      	mov	r3, r9
 80032e0:	1891      	adds	r1, r2, r2
 80032e2:	61b9      	str	r1, [r7, #24]
 80032e4:	415b      	adcs	r3, r3
 80032e6:	61fb      	str	r3, [r7, #28]
 80032e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032ec:	4641      	mov	r1, r8
 80032ee:	1851      	adds	r1, r2, r1
 80032f0:	6139      	str	r1, [r7, #16]
 80032f2:	4649      	mov	r1, r9
 80032f4:	414b      	adcs	r3, r1
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003304:	4659      	mov	r1, fp
 8003306:	00cb      	lsls	r3, r1, #3
 8003308:	4651      	mov	r1, sl
 800330a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800330e:	4651      	mov	r1, sl
 8003310:	00ca      	lsls	r2, r1, #3
 8003312:	4610      	mov	r0, r2
 8003314:	4619      	mov	r1, r3
 8003316:	4603      	mov	r3, r0
 8003318:	4642      	mov	r2, r8
 800331a:	189b      	adds	r3, r3, r2
 800331c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003320:	464b      	mov	r3, r9
 8003322:	460a      	mov	r2, r1
 8003324:	eb42 0303 	adc.w	r3, r2, r3
 8003328:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800332c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003336:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003344:	4649      	mov	r1, r9
 8003346:	008b      	lsls	r3, r1, #2
 8003348:	4641      	mov	r1, r8
 800334a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800334e:	4641      	mov	r1, r8
 8003350:	008a      	lsls	r2, r1, #2
 8003352:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003356:	f7fc ff55 	bl	8000204 <__aeabi_uldivmod>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4611      	mov	r1, r2
 8003360:	4b38      	ldr	r3, [pc, #224]	@ (8003444 <UART_SetConfig+0x4e4>)
 8003362:	fba3 2301 	umull	r2, r3, r3, r1
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	2264      	movs	r2, #100	@ 0x64
 800336a:	fb02 f303 	mul.w	r3, r2, r3
 800336e:	1acb      	subs	r3, r1, r3
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	3332      	adds	r3, #50	@ 0x32
 8003374:	4a33      	ldr	r2, [pc, #204]	@ (8003444 <UART_SetConfig+0x4e4>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003380:	441c      	add	r4, r3
 8003382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003386:	2200      	movs	r2, #0
 8003388:	673b      	str	r3, [r7, #112]	@ 0x70
 800338a:	677a      	str	r2, [r7, #116]	@ 0x74
 800338c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003390:	4642      	mov	r2, r8
 8003392:	464b      	mov	r3, r9
 8003394:	1891      	adds	r1, r2, r2
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	415b      	adcs	r3, r3
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033a0:	4641      	mov	r1, r8
 80033a2:	1851      	adds	r1, r2, r1
 80033a4:	6039      	str	r1, [r7, #0]
 80033a6:	4649      	mov	r1, r9
 80033a8:	414b      	adcs	r3, r1
 80033aa:	607b      	str	r3, [r7, #4]
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033b8:	4659      	mov	r1, fp
 80033ba:	00cb      	lsls	r3, r1, #3
 80033bc:	4651      	mov	r1, sl
 80033be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033c2:	4651      	mov	r1, sl
 80033c4:	00ca      	lsls	r2, r1, #3
 80033c6:	4610      	mov	r0, r2
 80033c8:	4619      	mov	r1, r3
 80033ca:	4603      	mov	r3, r0
 80033cc:	4642      	mov	r2, r8
 80033ce:	189b      	adds	r3, r3, r2
 80033d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033d2:	464b      	mov	r3, r9
 80033d4:	460a      	mov	r2, r1
 80033d6:	eb42 0303 	adc.w	r3, r2, r3
 80033da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80033e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80033f4:	4649      	mov	r1, r9
 80033f6:	008b      	lsls	r3, r1, #2
 80033f8:	4641      	mov	r1, r8
 80033fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033fe:	4641      	mov	r1, r8
 8003400:	008a      	lsls	r2, r1, #2
 8003402:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003406:	f7fc fefd 	bl	8000204 <__aeabi_uldivmod>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	4b0d      	ldr	r3, [pc, #52]	@ (8003444 <UART_SetConfig+0x4e4>)
 8003410:	fba3 1302 	umull	r1, r3, r3, r2
 8003414:	095b      	lsrs	r3, r3, #5
 8003416:	2164      	movs	r1, #100	@ 0x64
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	3332      	adds	r3, #50	@ 0x32
 8003422:	4a08      	ldr	r2, [pc, #32]	@ (8003444 <UART_SetConfig+0x4e4>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	095b      	lsrs	r3, r3, #5
 800342a:	f003 020f 	and.w	r2, r3, #15
 800342e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4422      	add	r2, r4
 8003436:	609a      	str	r2, [r3, #8]
}
 8003438:	bf00      	nop
 800343a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800343e:	46bd      	mov	sp, r7
 8003440:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003444:	51eb851f 	.word	0x51eb851f

08003448 <memset>:
 8003448:	4402      	add	r2, r0
 800344a:	4603      	mov	r3, r0
 800344c:	4293      	cmp	r3, r2
 800344e:	d100      	bne.n	8003452 <memset+0xa>
 8003450:	4770      	bx	lr
 8003452:	f803 1b01 	strb.w	r1, [r3], #1
 8003456:	e7f9      	b.n	800344c <memset+0x4>

08003458 <__libc_init_array>:
 8003458:	b570      	push	{r4, r5, r6, lr}
 800345a:	4d0d      	ldr	r5, [pc, #52]	@ (8003490 <__libc_init_array+0x38>)
 800345c:	4c0d      	ldr	r4, [pc, #52]	@ (8003494 <__libc_init_array+0x3c>)
 800345e:	1b64      	subs	r4, r4, r5
 8003460:	10a4      	asrs	r4, r4, #2
 8003462:	2600      	movs	r6, #0
 8003464:	42a6      	cmp	r6, r4
 8003466:	d109      	bne.n	800347c <__libc_init_array+0x24>
 8003468:	4d0b      	ldr	r5, [pc, #44]	@ (8003498 <__libc_init_array+0x40>)
 800346a:	4c0c      	ldr	r4, [pc, #48]	@ (800349c <__libc_init_array+0x44>)
 800346c:	f000 f818 	bl	80034a0 <_init>
 8003470:	1b64      	subs	r4, r4, r5
 8003472:	10a4      	asrs	r4, r4, #2
 8003474:	2600      	movs	r6, #0
 8003476:	42a6      	cmp	r6, r4
 8003478:	d105      	bne.n	8003486 <__libc_init_array+0x2e>
 800347a:	bd70      	pop	{r4, r5, r6, pc}
 800347c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003480:	4798      	blx	r3
 8003482:	3601      	adds	r6, #1
 8003484:	e7ee      	b.n	8003464 <__libc_init_array+0xc>
 8003486:	f855 3b04 	ldr.w	r3, [r5], #4
 800348a:	4798      	blx	r3
 800348c:	3601      	adds	r6, #1
 800348e:	e7f2      	b.n	8003476 <__libc_init_array+0x1e>
 8003490:	080034d8 	.word	0x080034d8
 8003494:	080034d8 	.word	0x080034d8
 8003498:	080034d8 	.word	0x080034d8
 800349c:	080034dc 	.word	0x080034dc

080034a0 <_init>:
 80034a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a2:	bf00      	nop
 80034a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034a6:	bc08      	pop	{r3}
 80034a8:	469e      	mov	lr, r3
 80034aa:	4770      	bx	lr

080034ac <_fini>:
 80034ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ae:	bf00      	nop
 80034b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034b2:	bc08      	pop	{r3}
 80034b4:	469e      	mov	lr, r3
 80034b6:	4770      	bx	lr
